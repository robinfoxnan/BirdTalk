syntax = "proto3";
import "user.proto";
package model;
option go_package = "server/pbmodel";
//option go_package = "client/pbmodel";
// protoc -I. --go_out=../ --go-grpc_out=../ msg.proto
// protoc --plugin="protoc-gen-ts=" --js_out="import_style=commonjs,binary:." --ts_out=. user.proto


// 服务定义
service MsgService {
  rpc ClientEvent (Msg) returns (Msg);
}




// 首先需要同步客户端的基础信息，服务端应答各种信息
message MsgHello {
  string clientId = 1;      // 客户端标识，用于区分不同客户端
  string version = 2;       // 客户端或协议的版本信息
  string platform = 3;      // 客户端运行的平台信息（例如：iOS、Android、Windows等）
  // 其他可能的字段，取决于你的需求
  string stage = 5;         // 状态数据, clienthello, serverhello,
  int64  keyPrint = 6;      // 对称密钥指纹，用于SID
  int64  rsaPrint = 7;      // 自己的公钥指纹
  map<string, string> params = 8;  // redirect->ip:port, dht
}


// DL秘钥交换的信息
// 1. 发起端(客户端使用对方RSA公钥加密临时秘钥给对方)，同时传递的还有秘钥对公钥
// 2. 服务端将，使用临时秘钥加密秘钥对公钥，算法为ChaCha20, aes256, twofish128
// 3. 客户将此时双方已经可以计算出共享密钥；用共享密钥加密临时秘钥，并根据加密算法生成秘钥，计算HASH,取8节作为指纹，
// 4. 服务端计算共享密钥，用共享密钥加密临时秘钥，并计算MD5，校验；
// 5， 如果校验成功，应答OK，如果失败应答FAIL
message MsgKeyExchange {
  int64 keyPrint = 1;
  int64 rsaPrint = 2;
  int32 stage = 3;   // 当前处于状态机

  bytes tempKey = 4;  // 临时秘钥，需要RSA加密
  bytes pubKey = 5;   // 临时公钥，需要RSA加密

  string encType = 6;      // plain, rsa加密，对阵加密类型
  string status = 7;       // ok, fail
  string detail = 8;       // 错误信息
}

message MsgHeartBeat{
  int64 tm = 1;
  int64 userId = 2;
}


// 消息优先级
enum MsgPriority {
  LOW = 0;
  NORMAL = 1;
  HIGH = 2;
  // 其他优先级...
}

// 消息状态
enum ChatMsgStatus {
  SENDING = 0;
  SENT = 1;       // 已经发送完成
  FAILED = 2;     // 失败
  DELIVERED = 3;   // 送达
  READ = 4;        // 已读
  DELETED = 5;     // 已经删除
  // 其他状态...
}

enum ChatMsgType {
  TEXT = 0;
  IMAGE = 1;
  VOICE = 2;
  VIDEO = 3;
  FILE = 4;
  DELETE = 5; // 删除之前的消息
  KEY = 6;    // 会话秘钥协商

  PLUGIN = 100;

  // 其他类型...
}

// 私聊的加密方式
enum EncryptType{
  PLAIN = 0;
  CUSTOM = 1;
  CHACHA20 = 2;
  TWOFISH = 3;
  AES = 4;
}

// 聊天类型2种：
enum ChatType{
  PrivateChatType = 0;
  GroupChatType = 1;
}




// 聊天存储的基本信息
message MsgChat {
  int64 msgId = 1;                // 消息的全网唯一标识，服务端使用雪花算法生成，因为客户端生成的不可靠
  int64 userId = 2;               // 用于存储的clusterKey，因为一份消息要存储2次，要转发，需要有这个字段

  int64 fromId = 3;              // 发送消息的用户 ID
  int64 toId = 4;                // 接收消息的用户 ID（对方的用户 ID）

  int64 tm = 5;                   // 消息的时间戳

  string devId = 6;               // 多设备登录时的设备 ID
  string sendId = 7;              // 用于确认消息的发送 ID

  ChatMsgType msgType = 8;        // 消息类型，建议使用枚举
  bytes data = 9;                 // 消息的内容，可以使用 bytes 存储二进制数据或文本数据

  MsgPriority priority = 10;      // 消息的优先级，建议使用枚举
  int64 refMessageId = 11;        // 引用的消息 ID，如果有的话

  ChatMsgStatus status = 12;      // 消息状态，建议使用枚举
  int64 sendReply = 13;           // 发送消息的回执状态
  int64 recvReply = 14;           // 接收消息的回执状态
  int64 readReply = 15;           // 已读状态的回执

  EncryptType encType = 16;       // 加密类型
  ChatType chatType = 17;         // p2p, group, system
  int32 subMsgType = 18;          // 传递给插件区分代码，插件都注册为整数类型，
  int64 keyPrint = 19;            // 秘钥指纹
}

// 消息确认，上传下载的确认
message MsgChatReply {
  int64 msgId = 1;      // 要确认的消息ID
  string sendId = 2;
  bool sendOk = 3;         // 确认是否成功
  bool recvOk = 4;
  bool readOk = 5;
  string extraMsg = 6;
  int64 userId = 7;        // 应答应该发送给谁
}


// 查询的类型：聊天数据，回执,关键字搜索
enum QueryDataType {
  QueryDataTypeData = 0;
  QueryDataTypeReply = 1;
  QueryDataTypeByTag = 2;
}
// 登录后查询离线消息，或者查询某些超时的送达和已读
// 向服务器上报自己当前的消息的位置，请求后续的部分
// 可能会答应一组消息，也可能应答一组应答，还可能是搜索结果
// 目前数据库还不能支持复杂的关键字搜索；
message MsgChatQuery{
    int64 userId = 1;               // 用户ID
    int64 groupId = 2;              // 如果查询私聊的消息不填，如果是查群聊就填写群聊的号码
    int64 bigId = 3;                // 这里是消息的范围
    int64 littleId = 4;             // 消息范围
    int32 synType = 5;              // 正向=0，反向=1
    int64 tm = 6;

    ChatType chatType = 7;          // p2p, group
    QueryDataType queryType = 8;           // data, reply
    map<string, string> params = 9;
}

// 查询的回执
message MsgChatQueryResult{
  int64 userId = 1;               // 用于存储的clusterKey
  int64 anId = 2;                 // 如果查询私聊的消息不填，如果是查群聊就填写群聊的号码
  int64 bigId = 3;                // 这里是消息的范围
  int64 littleId = 4;             // 消息范围
  int32 synType = 5;              // 正向=0，反向=1
  int64 tm = 6;

  ChatType chatType = 7;          // p2p, group
  QueryDataType queryType = 8;           // data, reply
  repeated MsgChat chatDataList = 11;
  repeated MsgChatReply chatReplyList = 12;
  map<string, string> params = 13;
}

// 上传文件的消息
message MsgUploadReq {
  string fileName = 1;      // 上传的文件名
  int64 fileSize = 2;       // 上传的文件大小
  bytes fileData = 3;       // 上传的文件数据

  string hashType = 4;      // 文件哈希算法类型（例如：MD5、SHA-256等）
  bytes hashCode = 5;       // 文件哈希值
  string fileType = 6;      // 文件类型（例如：文本、图像、视频等）
  string sendId = 7;        // 用于确认消息的发送 ID
}

// 上传文件的响应消息
message MsgUploadReply {
  string fileName = 1;    // 上传文件的名称，用于标识文件
  string sendId = 2;      // 用于确认消息的发送 ID
  string uuidName = 3;    // 服务器生成的文件唯一标识，例如存储在服务器上的文件名
  string result = 4;      // 上传结果或状态信息
}

// 下载文件的请求消息
message MsgDownloadReq {
  string sendId = 1;        // 用于确认消息的发送 ID
  string fileName = 2;      // 要下载的文件名
  int64  offset = 3;        // 下载的文件偏移量，如果不需要分片下载，可以忽略
}

// 下载文件的响应消息
message MsgDownloadReply {
  string sendId = 1;        // 用于确认消息的发送 ID
  string fileName = 2;      // 要下载的文件名
  string realName = 3;      // 实际保存在服务器上的文件名或标识符
  string fileType = 4;      // 文件类型（例如：文本、图像、视频等）

  string hashType = 5;      // 文件哈希算法类型，表示计算文件哈希值所使用的算法（MD5、SHA-256等）
  bytes hashCode = 6;       // 文件哈希值，用于验证文件完整性
  bytes data = 7;           // 下载的文件数据
  int64 size = 8;           // 文件总大小
  int64 offset = 9;         // 下载的文件偏移量，如果不需要分片下载，可以忽略
}

message MsgError{
  int32  code = 1;
  string detail = 2;

}

// 通用所有消息类型的定义
enum ComMsgType {
  MsgTUnused = 0;        // 未使用的消息类型
  MsgTHello = 1;         // 用于握手的消息
  MsgTHeartBeat = 2;     // 用于保持连接的心跳消息
  MsgTError = 3;         // 用于传递错误信息的消息
  MsgTKeyExchange = 4;   // DH密钥交换的消息

  MsgTChatMsg = 11;
  MsgTChatReply = 12;
  MsgTChatQuery = 13;         // 查询消息应该放在ChatMsg外面，
  MsgTChatQueryResult = 14;  // 推送的消息单个发送，查询才以组发送

  MsgTUpload = 21;        // 上传文件的消息
  MsgTDownload = 22;      // 下载文件的消息，文件操作分为带内和带外，这里是小文件可以这样操作
  MsgTUploadReply = 23;
  MsgTDownloadReply = 24;


  // 用户与群组消息一共是6大类，
  MsgTUserOp = 31;       // 所有用户相关操作的消息
  MsgTUserOpRet = 32;
  MsgTFriendOp = 33;
  MsgTFriendOpRet = 34;
  MsgTGroupOp = 35;      // 所有群组相关的操作
  MsgTGroupOpRet = 36;

  MsgTOther = 100;      // 转发给其他的扩展模块的

}

message MsgPlain{
  oneof message {
    MsgHello hello = 7;           // Hello消息
    MsgHeartBeat heartBeat = 8;   // 心跳消息
    MsgError     errorMsg = 9;
    MsgKeyExchange keyEx = 10;     // 秘钥协商

    MsgChat chatData = 11;         // 聊天消息
    MsgChatReply chatReply = 12;   // 聊天回复消息
    MsgChatQuery chatQuery = 13;           // 请求同步消息，或者同步超时回执
    MsgChatQueryResult chatQueryRet = 14;   // 查询结果

    MsgUploadReq uploadReq = 21;         // 上传请求消息
    MsgDownloadReq downloadReq = 22;     // 下载请求消息
    MsgUploadReply uploadReply = 23;    // 上传回复消息
    MsgDownloadReply downloadReply = 24; // 下载回复消息


    UserOpReq userOp = 31;             // 用户操作请求消息
    UserOpResult userOpRet = 32;       // 用户操作结果消息
    FriendOpReq friendOp = 33;         // 好友操作请求消息
    FriendOpResult friendOpRet = 34;   // 好友操作结果消息
    GroupOpReq groupOp = 35;           // 群组操作请求消息
    GroupOpResult groupOpRet = 36;     // 群组操作结果消息

    bytes  otherTypeMsg = 100;          // msgType==100时，直接将消息分发给扩展服务，不保存
  }
}

// 所有的消息都用
message Msg {
  int32 version = 1;            // 协议版本号
  int64 keyPrint = 2;           // 0是不加密，非0是加密
  int64 tm = 3;                  // 时间戳
  ComMsgType msgType = 4;        // 通用消息类型
  int32 subType = 5;             // msgType==100时，其他类型的消息扩展模块自己定义

  oneof message {
    bytes cipher = 11;             // 密文，需要解密后，二次解码
    MsgPlain plainMsg = 12;        // 明文的消息直接放到这里；
  }
}

// 备注：
// 1) 如果是与服务直接自己加密，那么所有的消息都放在cipher中，需要二次解密后分发；
// 1.1) 解密后的消息，字节流需要使用MsgPlain类型去反序列化，之后分发消息；
// 2) 与服务之间明文传输，可以依赖HTTPS保证一定程度安全；
// 2.1) 如果用户之间约定了加密，那么只有MsgChat其中的消息字段是密文，不影响其他逻辑；


