// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: user.proto

//package com.birdfish.model;

package pbmodel

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 用户和好友操作类型枚举
type UserOperationType int32

const (
	UserOperationType_UserNoneAction       UserOperationType = 0
	UserOperationType_RegisterUser         UserOperationType = 1
	UserOperationType_UnregisterUser       UserOperationType = 2
	UserOperationType_DisableUser          UserOperationType = 3
	UserOperationType_RecoverUser          UserOperationType = 4
	UserOperationType_SetUserInfo          UserOperationType = 5
	UserOperationType_RealNameVerification UserOperationType = 6
	UserOperationType_Login                UserOperationType = 7
	UserOperationType_Logout               UserOperationType = 8
	UserOperationType_FindUser             UserOperationType = 9
	UserOperationType_AddFriend            UserOperationType = 10
	UserOperationType_ApproveFriend        UserOperationType = 11
	UserOperationType_RemoveFriend         UserOperationType = 12
	UserOperationType_BlockFriend          UserOperationType = 13
	UserOperationType_UnBlockFriend        UserOperationType = 14
	UserOperationType_SetFriendPermission  UserOperationType = 15
	UserOperationType_SetFriendMemo        UserOperationType = 16
)

// Enum value maps for UserOperationType.
var (
	UserOperationType_name = map[int32]string{
		0:  "UserNoneAction",
		1:  "RegisterUser",
		2:  "UnregisterUser",
		3:  "DisableUser",
		4:  "RecoverUser",
		5:  "SetUserInfo",
		6:  "RealNameVerification",
		7:  "Login",
		8:  "Logout",
		9:  "FindUser",
		10: "AddFriend",
		11: "ApproveFriend",
		12: "RemoveFriend",
		13: "BlockFriend",
		14: "UnBlockFriend",
		15: "SetFriendPermission",
		16: "SetFriendMemo",
	}
	UserOperationType_value = map[string]int32{
		"UserNoneAction":       0,
		"RegisterUser":         1,
		"UnregisterUser":       2,
		"DisableUser":          3,
		"RecoverUser":          4,
		"SetUserInfo":          5,
		"RealNameVerification": 6,
		"Login":                7,
		"Logout":               8,
		"FindUser":             9,
		"AddFriend":            10,
		"ApproveFriend":        11,
		"RemoveFriend":         12,
		"BlockFriend":          13,
		"UnBlockFriend":        14,
		"SetFriendPermission":  15,
		"SetFriendMemo":        16,
	}
)

func (x UserOperationType) Enum() *UserOperationType {
	p := new(UserOperationType)
	*p = x
	return p
}

func (x UserOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[0].Descriptor()
}

func (UserOperationType) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[0]
}

func (x UserOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserOperationType.Descriptor instead.
func (UserOperationType) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

// 群组操作类型枚举
type GroupOperationType int32

const (
	GroupOperationType_GroupNoneAction    GroupOperationType = 0
	GroupOperationType_GroupCreate        GroupOperationType = 1  // 创建群组
	GroupOperationType_GroupDissolve      GroupOperationType = 2  // 解散群组
	GroupOperationType_GroupSetInfo       GroupOperationType = 3  // 设置群组本身的各种信息
	GroupOperationType_GroupKickMember    GroupOperationType = 4  // 踢人
	GroupOperationType_GroupInviteRequest GroupOperationType = 5  // 邀请人请求
	GroupOperationType_GroupInviteAnswer  GroupOperationType = 6  // 邀请后处理结果
	GroupOperationType_GroupJoinRequest   GroupOperationType = 7  // 加入请求
	GroupOperationType_GroupJoinAnswer    GroupOperationType = 8  // 加入请求的处理，同意、拒绝、问题
	GroupOperationType_GroupQuit          GroupOperationType = 9  // 退出群组
	GroupOperationType_GroupAddAdmin      GroupOperationType = 10 // 增加管理员
	GroupOperationType_GroupDelAdmin      GroupOperationType = 11 // 删除管理员
	GroupOperationType_GroupTransferOwner GroupOperationType = 12 // 转让群主
	// 可以根据需要添加其他群组操作
	GroupOperationType_GroupSetMemberInfo GroupOperationType = 13 // 设置自己在群中的信息
	GroupOperationType_GroupSearch        GroupOperationType = 14 // 搜素群组
	GroupOperationType_GroupSearchMember  GroupOperationType = 15 // 人员过多时候，不能全部同步到客户端，需要搜索或者分页
)

// Enum value maps for GroupOperationType.
var (
	GroupOperationType_name = map[int32]string{
		0:  "GroupNoneAction",
		1:  "GroupCreate",
		2:  "GroupDissolve",
		3:  "GroupSetInfo",
		4:  "GroupKickMember",
		5:  "GroupInviteRequest",
		6:  "GroupInviteAnswer",
		7:  "GroupJoinRequest",
		8:  "GroupJoinAnswer",
		9:  "GroupQuit",
		10: "GroupAddAdmin",
		11: "GroupDelAdmin",
		12: "GroupTransferOwner",
		13: "GroupSetMemberInfo",
		14: "GroupSearch",
		15: "GroupSearchMember",
	}
	GroupOperationType_value = map[string]int32{
		"GroupNoneAction":    0,
		"GroupCreate":        1,
		"GroupDissolve":      2,
		"GroupSetInfo":       3,
		"GroupKickMember":    4,
		"GroupInviteRequest": 5,
		"GroupInviteAnswer":  6,
		"GroupJoinRequest":   7,
		"GroupJoinAnswer":    8,
		"GroupQuit":          9,
		"GroupAddAdmin":      10,
		"GroupDelAdmin":      11,
		"GroupTransferOwner": 12,
		"GroupSetMemberInfo": 13,
		"GroupSearch":        14,
		"GroupSearchMember":  15,
	}
)

func (x GroupOperationType) Enum() *GroupOperationType {
	p := new(GroupOperationType)
	*p = x
	return p
}

func (x GroupOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[1].Descriptor()
}

func (GroupOperationType) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[1]
}

func (x GroupOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupOperationType.Descriptor instead.
func (GroupOperationType) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

type GroupOperationResultType int32

const (
	GroupOperationResultType_GroupOperationResultNone   GroupOperationResultType = 0
	GroupOperationResultType_GroupOperationResultOk     GroupOperationResultType = 1
	GroupOperationResultType_GroupOperationResultRefuse GroupOperationResultType = 2
)

// Enum value maps for GroupOperationResultType.
var (
	GroupOperationResultType_name = map[int32]string{
		0: "GroupOperationResultNone",
		1: "GroupOperationResultOk",
		2: "GroupOperationResultRefuse",
	}
	GroupOperationResultType_value = map[string]int32{
		"GroupOperationResultNone":   0,
		"GroupOperationResultOk":     1,
		"GroupOperationResultRefuse": 2,
	}
)

func (x GroupOperationResultType) Enum() *GroupOperationResultType {
	p := new(GroupOperationResultType)
	*p = x
	return p
}

func (x GroupOperationResultType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupOperationResultType) Descriptor() protoreflect.EnumDescriptor {
	return file_user_proto_enumTypes[2].Descriptor()
}

func (GroupOperationResultType) Type() protoreflect.EnumType {
	return &file_user_proto_enumTypes[2]
}

func (x GroupOperationResultType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupOperationResultType.Descriptor instead.
func (GroupOperationResultType) EnumDescriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{2}
}

// 用户相关的消息分为3类：User Friend Group，每一类都有请求和应答，一共是6大类消息
// 用户信息消息
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64             `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`                                                                                         // 注册时候全局分配的
	UserName string            `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`                                                                                      // 用户名
	NickName string            `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName,omitempty"`                                                                                      // 昵称
	Email    string            `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`                                                                                            // 邮箱
	Phone    string            `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`                                                                                            // 手机号
	Gender   string            `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender,omitempty"`                                                                                          // 性别
	Age      int32             `protobuf:"varint,7,opt,name=age,proto3" json:"age,omitempty"`                                                                                               // 年龄
	Region   string            `protobuf:"bytes,8,opt,name=region,proto3" json:"region,omitempty"`                                                                                          // 地区
	Icon     string            `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`                                                                                              // 头像
	Params   map[string]string `protobuf:"bytes,10,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 其他参数，使用map存储比如，title, pwd, sid, icon
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{0}
}

func (x *UserInfo) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserInfo) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *UserInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserInfo) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *UserInfo) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *UserInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *UserInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *UserInfo) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// 用户操作请求消息
type UserOpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation UserOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=model.UserOperationType" json:"operation,omitempty"`                                                     // 操作类型，例如：注册用户、注销、禁用、恢复、设置信息、实名验证、登录、退出、查找用户
	User      *UserInfo         `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`                                                                                             // 涉及的用户信息
	Params    map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 比如申请好友的附加消息
}

func (x *UserOpReq) Reset() {
	*x = UserOpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOpReq) ProtoMessage() {}

func (x *UserOpReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOpReq.ProtoReflect.Descriptor instead.
func (*UserOpReq) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{1}
}

func (x *UserOpReq) GetOperation() UserOperationType {
	if x != nil {
		return x.Operation
	}
	return UserOperationType_UserNoneAction
}

func (x *UserOpReq) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserOpReq) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// 用户操作结果消息
type UserOpResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation UserOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=model.UserOperationType" json:"operation,omitempty"` // 操作类型
	Result    string            `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`                                     // "ok" "fail"
	Status    string            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Users     []*UserInfo       `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"` // 涉及的用户信息列表，使用repeated表示多个用户
	Params    map[string]string `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UserOpResult) Reset() {
	*x = UserOpResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOpResult) ProtoMessage() {}

func (x *UserOpResult) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOpResult.ProtoReflect.Descriptor instead.
func (*UserOpResult) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{2}
}

func (x *UserOpResult) GetOperation() UserOperationType {
	if x != nil {
		return x.Operation
	}
	return UserOperationType_UserNoneAction
}

func (x *UserOpResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *UserOpResult) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserOpResult) GetUsers() []*UserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *UserOpResult) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// 好友操作请求消息
type FriendOpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation UserOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=model.UserOperationType" json:"operation,omitempty"` // 操作类型，例如：申请好友、同意好友、删除好友、屏蔽好友
	User      *UserInfo         `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`                                         // 涉及的用户信息，例如在申请好友时，表示被申请加为好友的用户
	SendId    int64             `protobuf:"varint,3,opt,name=sendId,proto3" json:"sendId,omitempty"`                                    // 用户发给服务器的时候带着，主要是有可能对方离线
	MsgId     int64             `protobuf:"varint,4,opt,name=msgId,proto3" json:"msgId,omitempty"`                                      // 转发给用户的时候才有
	Params    map[string]string `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FriendOpReq) Reset() {
	*x = FriendOpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendOpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendOpReq) ProtoMessage() {}

func (x *FriendOpReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendOpReq.ProtoReflect.Descriptor instead.
func (*FriendOpReq) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{3}
}

func (x *FriendOpReq) GetOperation() UserOperationType {
	if x != nil {
		return x.Operation
	}
	return UserOperationType_UserNoneAction
}

func (x *FriendOpReq) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *FriendOpReq) GetSendId() int64 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *FriendOpReq) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *FriendOpReq) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// 好友操作结果消息
type FriendOpResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation UserOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=model.UserOperationType" json:"operation,omitempty"` // 操作类型
	Result    string            `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`                                     // "ok" "fail"
	User      *UserInfo         `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`                                         // 消息发起者
	Users     *UserInfo         `protobuf:"bytes,4,opt,name=users,proto3" json:"users,omitempty"`                                       // 涉及的用户信息列表，使用repeated表示多个用户
	SendId    int64             `protobuf:"varint,5,opt,name=sendId,proto3" json:"sendId,omitempty"`                                    // 用户发给服务器的时候带着
	MsgId     int64             `protobuf:"varint,6,opt,name=msgId,proto3" json:"msgId,omitempty"`                                      // 转发给用户的时候才有
	Params    map[string]string `protobuf:"bytes,7,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FriendOpResult) Reset() {
	*x = FriendOpResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendOpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendOpResult) ProtoMessage() {}

func (x *FriendOpResult) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendOpResult.ProtoReflect.Descriptor instead.
func (*FriendOpResult) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{4}
}

func (x *FriendOpResult) GetOperation() UserOperationType {
	if x != nil {
		return x.Operation
	}
	return UserOperationType_UserNoneAction
}

func (x *FriendOpResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *FriendOpResult) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *FriendOpResult) GetUsers() *UserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *FriendOpResult) GetSendId() int64 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *FriendOpResult) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *FriendOpResult) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// 群组成员的信息
type GroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  int64             `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Nick    string            `protobuf:"bytes,2,opt,name=nick,proto3" json:"nick,omitempty"`
	Icon    string            `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Role    string            `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"` // 角色信息，例如：管理员、普通成员等
	GroupId int64             `protobuf:"varint,5,opt,name=groupId,proto3" json:"groupId,omitempty"`
	Params  map[string]string `protobuf:"bytes,6,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 其他参数，例如：成员特殊属性等
}

func (x *GroupMember) Reset() {
	*x = GroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMember) ProtoMessage() {}

func (x *GroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMember.ProtoReflect.Descriptor instead.
func (*GroupMember) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{5}
}

func (x *GroupMember) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GroupMember) GetNick() string {
	if x != nil {
		return x.Nick
	}
	return ""
}

func (x *GroupMember) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *GroupMember) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *GroupMember) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupMember) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// 群组信息
type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   int64             `protobuf:"varint,1,opt,name=groupId,proto3" json:"groupId,omitempty"`                                                                                      // 注册时全局分配的群组ID
	Tags      []string          `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`                                                                                             // 群组标签
	GroupName string            `protobuf:"bytes,3,opt,name=groupName,proto3" json:"groupName,omitempty"`                                                                                   // 群组名称
	GroupType string            `protobuf:"bytes,4,opt,name=groupType,proto3" json:"groupType,omitempty"`                                                                                   // 群组类型，例如：群聊、广播频道等
	Params    map[string]string `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 其他参数，例如：是否公开、验证方法、验证口令等
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{6}
}

func (x *GroupInfo) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GroupInfo) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *GroupInfo) GetGroupType() string {
	if x != nil {
		return x.GroupType
	}
	return ""
}

func (x *GroupInfo) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// 群组操作请求消息
type GroupOpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation GroupOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=model.GroupOperationType" json:"operation,omitempty"` // 群组操作类型: 创建群，解散群，设置信息；踢人，邀请人请求，加入请求，请求结果，增加管理员，转让群主
	ReqMem    *GroupMember       `protobuf:"bytes,2,opt,name=ReqMem,proto3" json:"ReqMem,omitempty"`                                      // 申请人，便于转发
	Group     *GroupInfo         `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`                                        // 涉及的群组信息
	Members   []*GroupMember     `protobuf:"bytes,4,rep,name=members,proto3" json:"members,omitempty"`                                    // 涉及的群组成员信息列表
	SendId    int64              `protobuf:"varint,6,opt,name=sendId,proto3" json:"sendId,omitempty"`                                     // 用户发给服务器的时候带着
	MsgId     int64              `protobuf:"varint,7,opt,name=msgId,proto3" json:"msgId,omitempty"`                                       // 转发给用户的时候才有
	Params    map[string]string  `protobuf:"bytes,8,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GroupOpReq) Reset() {
	*x = GroupOpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupOpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupOpReq) ProtoMessage() {}

func (x *GroupOpReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupOpReq.ProtoReflect.Descriptor instead.
func (*GroupOpReq) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{7}
}

func (x *GroupOpReq) GetOperation() GroupOperationType {
	if x != nil {
		return x.Operation
	}
	return GroupOperationType_GroupNoneAction
}

func (x *GroupOpReq) GetReqMem() *GroupMember {
	if x != nil {
		return x.ReqMem
	}
	return nil
}

func (x *GroupOpReq) GetGroup() *GroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupOpReq) GetMembers() []*GroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GroupOpReq) GetSendId() int64 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *GroupOpReq) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *GroupOpReq) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type GroupOpResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation GroupOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=model.GroupOperationType" json:"operation,omitempty"`
	ReqMem    *GroupMember       `protobuf:"bytes,2,opt,name=ReqMem,proto3" json:"ReqMem,omitempty"`
	Result    string             `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Detail    string             `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
	Group     *GroupInfo         `protobuf:"bytes,5,opt,name=group,proto3" json:"group,omitempty"`
	SendId    int64              `protobuf:"varint,6,opt,name=sendId,proto3" json:"sendId,omitempty"`  // 用户发给服务器的时候带着
	MsgId     int64              `protobuf:"varint,7,opt,name=msgId,proto3" json:"msgId,omitempty"`    // 转发给用户的时候才有
	Members   []*GroupMember     `protobuf:"bytes,8,rep,name=members,proto3" json:"members,omitempty"` // 涉及的群组成员信息列表
	Params    map[string]string  `protobuf:"bytes,9,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GroupOpResult) Reset() {
	*x = GroupOpResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupOpResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupOpResult) ProtoMessage() {}

func (x *GroupOpResult) ProtoReflect() protoreflect.Message {
	mi := &file_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupOpResult.ProtoReflect.Descriptor instead.
func (*GroupOpResult) Descriptor() ([]byte, []int) {
	return file_user_proto_rawDescGZIP(), []int{8}
}

func (x *GroupOpResult) GetOperation() GroupOperationType {
	if x != nil {
		return x.Operation
	}
	return GroupOperationType_GroupNoneAction
}

func (x *GroupOpResult) GetReqMem() *GroupMember {
	if x != nil {
		return x.ReqMem
	}
	return nil
}

func (x *GroupOpResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *GroupOpResult) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *GroupOpResult) GetGroup() *GroupInfo {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupOpResult) GetSendId() int64 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *GroupOpResult) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *GroupOpResult) GetMembers() []*GroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *GroupOpResult) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

var File_user_proto protoreflect.FileDescriptor

var file_user_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x22, 0xcc, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xd9, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x71,
	0x12, 0x36, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91,
	0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x36, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x37,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x8b, 0x02, 0x0a, 0x0b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x36, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x52, 0x65,
	0x71, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xd0, 0x02, 0x0a, 0x0e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xee, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x69, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x02,
	0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x37, 0x0a, 0x09,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x52, 0x65, 0x71, 0x4d, 0x65,
	0x6d, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x03, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x06, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x26,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xc3, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x65,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x07, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x46,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x0c, 0x12, 0x0f, 0x0a,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10, 0x0d, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x10,
	0x0e, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x10, 0x10, 0x2a, 0xdb, 0x02,
	0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x6e,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x69, 0x63, 0x6b, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65,
	0x72, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x10, 0x08, 0x12, 0x0d,
	0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x51, 0x75, 0x69, 0x74, 0x10, 0x09, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x0a,
	0x12, 0x11, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x0f, 0x2a, 0x74, 0x0a, 0x18, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e,
	0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x6b, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x10,
	0x02, 0x42, 0x10, 0x5a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_proto_rawDescOnce sync.Once
	file_user_proto_rawDescData = file_user_proto_rawDesc
)

func file_user_proto_rawDescGZIP() []byte {
	file_user_proto_rawDescOnce.Do(func() {
		file_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_proto_rawDescData)
	})
	return file_user_proto_rawDescData
}

var file_user_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_user_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_user_proto_goTypes = []interface{}{
	(UserOperationType)(0),        // 0: model.UserOperationType
	(GroupOperationType)(0),       // 1: model.GroupOperationType
	(GroupOperationResultType)(0), // 2: model.GroupOperationResultType
	(*UserInfo)(nil),              // 3: model.UserInfo
	(*UserOpReq)(nil),             // 4: model.UserOpReq
	(*UserOpResult)(nil),          // 5: model.UserOpResult
	(*FriendOpReq)(nil),           // 6: model.FriendOpReq
	(*FriendOpResult)(nil),        // 7: model.FriendOpResult
	(*GroupMember)(nil),           // 8: model.GroupMember
	(*GroupInfo)(nil),             // 9: model.GroupInfo
	(*GroupOpReq)(nil),            // 10: model.GroupOpReq
	(*GroupOpResult)(nil),         // 11: model.GroupOpResult
	nil,                           // 12: model.UserInfo.ParamsEntry
	nil,                           // 13: model.UserOpReq.ParamsEntry
	nil,                           // 14: model.UserOpResult.ParamsEntry
	nil,                           // 15: model.FriendOpReq.ParamsEntry
	nil,                           // 16: model.FriendOpResult.ParamsEntry
	nil,                           // 17: model.GroupMember.ParamsEntry
	nil,                           // 18: model.GroupInfo.ParamsEntry
	nil,                           // 19: model.GroupOpReq.ParamsEntry
	nil,                           // 20: model.GroupOpResult.ParamsEntry
}
var file_user_proto_depIdxs = []int32{
	12, // 0: model.UserInfo.params:type_name -> model.UserInfo.ParamsEntry
	0,  // 1: model.UserOpReq.operation:type_name -> model.UserOperationType
	3,  // 2: model.UserOpReq.user:type_name -> model.UserInfo
	13, // 3: model.UserOpReq.params:type_name -> model.UserOpReq.ParamsEntry
	0,  // 4: model.UserOpResult.operation:type_name -> model.UserOperationType
	3,  // 5: model.UserOpResult.users:type_name -> model.UserInfo
	14, // 6: model.UserOpResult.params:type_name -> model.UserOpResult.ParamsEntry
	0,  // 7: model.FriendOpReq.operation:type_name -> model.UserOperationType
	3,  // 8: model.FriendOpReq.user:type_name -> model.UserInfo
	15, // 9: model.FriendOpReq.params:type_name -> model.FriendOpReq.ParamsEntry
	0,  // 10: model.FriendOpResult.operation:type_name -> model.UserOperationType
	3,  // 11: model.FriendOpResult.user:type_name -> model.UserInfo
	3,  // 12: model.FriendOpResult.users:type_name -> model.UserInfo
	16, // 13: model.FriendOpResult.params:type_name -> model.FriendOpResult.ParamsEntry
	17, // 14: model.GroupMember.params:type_name -> model.GroupMember.ParamsEntry
	18, // 15: model.GroupInfo.params:type_name -> model.GroupInfo.ParamsEntry
	1,  // 16: model.GroupOpReq.operation:type_name -> model.GroupOperationType
	8,  // 17: model.GroupOpReq.ReqMem:type_name -> model.GroupMember
	9,  // 18: model.GroupOpReq.group:type_name -> model.GroupInfo
	8,  // 19: model.GroupOpReq.members:type_name -> model.GroupMember
	19, // 20: model.GroupOpReq.params:type_name -> model.GroupOpReq.ParamsEntry
	1,  // 21: model.GroupOpResult.operation:type_name -> model.GroupOperationType
	8,  // 22: model.GroupOpResult.ReqMem:type_name -> model.GroupMember
	9,  // 23: model.GroupOpResult.group:type_name -> model.GroupInfo
	8,  // 24: model.GroupOpResult.members:type_name -> model.GroupMember
	20, // 25: model.GroupOpResult.params:type_name -> model.GroupOpResult.ParamsEntry
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_user_proto_init() }
func file_user_proto_init() {
	if File_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOpResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendOpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FriendOpResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupOpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupOpResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_user_proto_goTypes,
		DependencyIndexes: file_user_proto_depIdxs,
		EnumInfos:         file_user_proto_enumTypes,
		MessageInfos:      file_user_proto_msgTypes,
	}.Build()
	File_user_proto = out.File
	file_user_proto_rawDesc = nil
	file_user_proto_goTypes = nil
	file_user_proto_depIdxs = nil
}
