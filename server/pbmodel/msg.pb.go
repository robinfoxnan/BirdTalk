// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: msg.proto

package pbmodel

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 通用所有消息类型的定义
type ComMsgType int32

const (
	ComMsgType_MsgTUnused        ComMsgType = 0 // 未使用的消息类型
	ComMsgType_MsgTHello         ComMsgType = 1 // 用于握手的消息
	ComMsgType_MsgTHeartBeat     ComMsgType = 2 // 用于保持连接的心跳消息
	ComMsgType_MsgTError         ComMsgType = 3 // 用于传递错误信息的消息
	ComMsgType_MsgTKeyExchange   ComMsgType = 4 // DH密钥交换的消息
	ComMsgType_MsgTChatMsg       ComMsgType = 5 // 聊天消息
	ComMsgType_MsgTUpload        ComMsgType = 6 // 上传文件的消息
	ComMsgType_MsgTDownload      ComMsgType = 7 // 下载文件的消息，文件操作分为带内和带外，这里是小文件可以这样操作
	ComMsgType_MsgTChatMsgReply  ComMsgType = 8
	ComMsgType_MsgTUploadReply   ComMsgType = 9
	ComMsgType_MsgTDownloadReply ComMsgType = 10
	ComMsgType_MsgTQuery         ComMsgType = 11
	// 用户与群组消息一共是6大类，
	ComMsgType_MsgTUserOp      ComMsgType = 12 // 所有用户相关操作的消息
	ComMsgType_MsgTUserOpRet   ComMsgType = 13
	ComMsgType_MsgTFriendOp    ComMsgType = 14
	ComMsgType_MsgTFriendOpRet ComMsgType = 15
	ComMsgType_MsgTGroupOp     ComMsgType = 16 // 所有群组相关的操作
	ComMsgType_MsgTGroupOpRet  ComMsgType = 17
)

// Enum value maps for ComMsgType.
var (
	ComMsgType_name = map[int32]string{
		0:  "MsgTUnused",
		1:  "MsgTHello",
		2:  "MsgTHeartBeat",
		3:  "MsgTError",
		4:  "MsgTKeyExchange",
		5:  "MsgTChatMsg",
		6:  "MsgTUpload",
		7:  "MsgTDownload",
		8:  "MsgTChatMsgReply",
		9:  "MsgTUploadReply",
		10: "MsgTDownloadReply",
		11: "MsgTQuery",
		12: "MsgTUserOp",
		13: "MsgTUserOpRet",
		14: "MsgTFriendOp",
		15: "MsgTFriendOpRet",
		16: "MsgTGroupOp",
		17: "MsgTGroupOpRet",
	}
	ComMsgType_value = map[string]int32{
		"MsgTUnused":        0,
		"MsgTHello":         1,
		"MsgTHeartBeat":     2,
		"MsgTError":         3,
		"MsgTKeyExchange":   4,
		"MsgTChatMsg":       5,
		"MsgTUpload":        6,
		"MsgTDownload":      7,
		"MsgTChatMsgReply":  8,
		"MsgTUploadReply":   9,
		"MsgTDownloadReply": 10,
		"MsgTQuery":         11,
		"MsgTUserOp":        12,
		"MsgTUserOpRet":     13,
		"MsgTFriendOp":      14,
		"MsgTFriendOpRet":   15,
		"MsgTGroupOp":       16,
		"MsgTGroupOpRet":    17,
	}
)

func (x ComMsgType) Enum() *ComMsgType {
	p := new(ComMsgType)
	*p = x
	return p
}

func (x ComMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[0].Descriptor()
}

func (ComMsgType) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[0]
}

func (x ComMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComMsgType.Descriptor instead.
func (ComMsgType) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

// 消息优先级
type MsgPriority int32

const (
	MsgPriority_LOW    MsgPriority = 0
	MsgPriority_NORMAL MsgPriority = 1
	MsgPriority_HIGH   MsgPriority = 2 // 其他优先级...
)

// Enum value maps for MsgPriority.
var (
	MsgPriority_name = map[int32]string{
		0: "LOW",
		1: "NORMAL",
		2: "HIGH",
	}
	MsgPriority_value = map[string]int32{
		"LOW":    0,
		"NORMAL": 1,
		"HIGH":   2,
	}
)

func (x MsgPriority) Enum() *MsgPriority {
	p := new(MsgPriority)
	*p = x
	return p
}

func (x MsgPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[1].Descriptor()
}

func (MsgPriority) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[1]
}

func (x MsgPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgPriority.Descriptor instead.
func (MsgPriority) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1}
}

// 消息状态
type ChatMsgStatus int32

const (
	ChatMsgStatus_SENDING   ChatMsgStatus = 0
	ChatMsgStatus_SENT      ChatMsgStatus = 1 // 已经发送完成
	ChatMsgStatus_FAILED    ChatMsgStatus = 2 // 失败
	ChatMsgStatus_DELIVERED ChatMsgStatus = 3 // 送达
	ChatMsgStatus_READ      ChatMsgStatus = 4 // 已读
	ChatMsgStatus_DELETED   ChatMsgStatus = 5 // 已经删除
)

// Enum value maps for ChatMsgStatus.
var (
	ChatMsgStatus_name = map[int32]string{
		0: "SENDING",
		1: "SENT",
		2: "FAILED",
		3: "DELIVERED",
		4: "READ",
		5: "DELETED",
	}
	ChatMsgStatus_value = map[string]int32{
		"SENDING":   0,
		"SENT":      1,
		"FAILED":    2,
		"DELIVERED": 3,
		"READ":      4,
		"DELETED":   5,
	}
)

func (x ChatMsgStatus) Enum() *ChatMsgStatus {
	p := new(ChatMsgStatus)
	*p = x
	return p
}

func (x ChatMsgStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatMsgStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[2].Descriptor()
}

func (ChatMsgStatus) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[2]
}

func (x ChatMsgStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatMsgStatus.Descriptor instead.
func (ChatMsgStatus) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{2}
}

type ChatMsgType int32

const (
	ChatMsgType_TEXT   ChatMsgType = 0
	ChatMsgType_IMAGE  ChatMsgType = 1
	ChatMsgType_VOICE  ChatMsgType = 2
	ChatMsgType_VIDEO  ChatMsgType = 3
	ChatMsgType_FILE   ChatMsgType = 4
	ChatMsgType_DELETE ChatMsgType = 5 // 删除之前的消息
)

// Enum value maps for ChatMsgType.
var (
	ChatMsgType_name = map[int32]string{
		0: "TEXT",
		1: "IMAGE",
		2: "VOICE",
		3: "VIDEO",
		4: "FILE",
		5: "DELETE",
	}
	ChatMsgType_value = map[string]int32{
		"TEXT":   0,
		"IMAGE":  1,
		"VOICE":  2,
		"VIDEO":  3,
		"FILE":   4,
		"DELETE": 5,
	}
)

func (x ChatMsgType) Enum() *ChatMsgType {
	p := new(ChatMsgType)
	*p = x
	return p
}

func (x ChatMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[3].Descriptor()
}

func (ChatMsgType) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[3]
}

func (x ChatMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatMsgType.Descriptor instead.
func (ChatMsgType) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{3}
}

type EncryptType int32

const (
	EncryptType_PLAIN  EncryptType = 0
	EncryptType_CUSTOM EncryptType = 1
)

// Enum value maps for EncryptType.
var (
	EncryptType_name = map[int32]string{
		0: "PLAIN",
		1: "CUSTOM",
	}
	EncryptType_value = map[string]int32{
		"PLAIN":  0,
		"CUSTOM": 1,
	}
)

func (x EncryptType) Enum() *EncryptType {
	p := new(EncryptType)
	*p = x
	return p
}

func (x EncryptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[4].Descriptor()
}

func (EncryptType) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[4]
}

func (x EncryptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptType.Descriptor instead.
func (EncryptType) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{4}
}

type MsgHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` // 客户端标识，用于区分不同客户端
	Version  string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`   // 客户端或协议的版本信息
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"` // 客户端运行的平台信息（例如：iOS、Android、Windows等）
	// 其他可能的字段，取决于你的需求
	Stage  string            `protobuf:"bytes,5,opt,name=stage,proto3" json:"stage,omitempty"`                                                                                           // 状态数据, clienthello, serverhello,
	Params map[string]string `protobuf:"bytes,6,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // redirect->ip:port, dht
}

func (x *MsgHello) Reset() {
	*x = MsgHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHello) ProtoMessage() {}

func (x *MsgHello) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHello.ProtoReflect.Descriptor instead.
func (*MsgHello) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

func (x *MsgHello) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MsgHello) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MsgHello) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *MsgHello) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *MsgHello) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type MsgHeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tm     int64 `protobuf:"varint,1,opt,name=tm,proto3" json:"tm,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *MsgHeartBeat) Reset() {
	*x = MsgHeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHeartBeat) ProtoMessage() {}

func (x *MsgHeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHeartBeat.ProtoReflect.Descriptor instead.
func (*MsgHeartBeat) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1}
}

func (x *MsgHeartBeat) GetTm() int64 {
	if x != nil {
		return x.Tm
	}
	return 0
}

func (x *MsgHeartBeat) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 聊天存储的基本信息
type MsgChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId        int64         `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId,omitempty"`                               // 消息的全网唯一标识，服务端使用雪花算法生成，因为客户端生成的不可靠
	UserId       int64         `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                             // 用于存储的clusterKey，因为一份消息要存储2次，要转发，需要有这个字段
	FromId       int64         `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`                             // 发送消息的用户 ID
	ToId         int64         `protobuf:"varint,4,opt,name=toId,proto3" json:"toId,omitempty"`                                 // 接收消息的用户 ID（对方的用户 ID）
	Tm           int64         `protobuf:"varint,5,opt,name=tm,proto3" json:"tm,omitempty"`                                     // 消息的时间戳
	DevId        string        `protobuf:"bytes,6,opt,name=devId,proto3" json:"devId,omitempty"`                                // 多设备登录时的设备 ID
	SendId       string        `protobuf:"bytes,7,opt,name=sendId,proto3" json:"sendId,omitempty"`                              // 用于确认消息的发送 ID
	MsgType      ChatMsgType   `protobuf:"varint,8,opt,name=msgType,proto3,enum=model.ChatMsgType" json:"msgType,omitempty"`    // 消息类型，建议使用枚举
	Data         []byte        `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`                                  // 消息的内容，可以使用 bytes 存储二进制数据或文本数据
	Priority     MsgPriority   `protobuf:"varint,10,opt,name=priority,proto3,enum=model.MsgPriority" json:"priority,omitempty"` // 消息的优先级，建议使用枚举
	RefMessageId int64         `protobuf:"varint,11,opt,name=refMessageId,proto3" json:"refMessageId,omitempty"`                // 引用的消息 ID，如果有的话
	Status       ChatMsgStatus `protobuf:"varint,12,opt,name=status,proto3,enum=model.ChatMsgStatus" json:"status,omitempty"`   // 消息状态，建议使用枚举
	SendReply    int32         `protobuf:"varint,13,opt,name=sendReply,proto3" json:"sendReply,omitempty"`                      // 发送消息的回执状态
	RecvReply    int32         `protobuf:"varint,14,opt,name=recvReply,proto3" json:"recvReply,omitempty"`                      // 接收消息的回执状态
	ReadReply    int32         `protobuf:"varint,15,opt,name=readReply,proto3" json:"readReply,omitempty"`                      // 已读状态的回执
	EncType      EncryptType   `protobuf:"varint,16,opt,name=encType,proto3,enum=model.EncryptType" json:"encType,omitempty"`   // 加密类型
	ChatType     string        `protobuf:"bytes,17,opt,name=chatType,proto3" json:"chatType,omitempty"`                         // p2p, group, system
}

func (x *MsgChat) Reset() {
	*x = MsgChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChat) ProtoMessage() {}

func (x *MsgChat) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChat.ProtoReflect.Descriptor instead.
func (*MsgChat) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{2}
}

func (x *MsgChat) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *MsgChat) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MsgChat) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *MsgChat) GetToId() int64 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *MsgChat) GetTm() int64 {
	if x != nil {
		return x.Tm
	}
	return 0
}

func (x *MsgChat) GetDevId() string {
	if x != nil {
		return x.DevId
	}
	return ""
}

func (x *MsgChat) GetSendId() string {
	if x != nil {
		return x.SendId
	}
	return ""
}

func (x *MsgChat) GetMsgType() ChatMsgType {
	if x != nil {
		return x.MsgType
	}
	return ChatMsgType_TEXT
}

func (x *MsgChat) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MsgChat) GetPriority() MsgPriority {
	if x != nil {
		return x.Priority
	}
	return MsgPriority_LOW
}

func (x *MsgChat) GetRefMessageId() int64 {
	if x != nil {
		return x.RefMessageId
	}
	return 0
}

func (x *MsgChat) GetStatus() ChatMsgStatus {
	if x != nil {
		return x.Status
	}
	return ChatMsgStatus_SENDING
}

func (x *MsgChat) GetSendReply() int32 {
	if x != nil {
		return x.SendReply
	}
	return 0
}

func (x *MsgChat) GetRecvReply() int32 {
	if x != nil {
		return x.RecvReply
	}
	return 0
}

func (x *MsgChat) GetReadReply() int32 {
	if x != nil {
		return x.ReadReply
	}
	return 0
}

func (x *MsgChat) GetEncType() EncryptType {
	if x != nil {
		return x.EncType
	}
	return EncryptType_PLAIN
}

func (x *MsgChat) GetChatType() string {
	if x != nil {
		return x.ChatType
	}
	return ""
}

// 消息确认，上传下载的确认
type MsgChatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    int64  `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId,omitempty"` // 要确认的消息ID
	SendId   string `protobuf:"bytes,2,opt,name=sendId,proto3" json:"sendId,omitempty"`
	SendOk   bool   `protobuf:"varint,3,opt,name=sendOk,proto3" json:"sendOk,omitempty"` // 确认是否成功
	RecvOk   bool   `protobuf:"varint,4,opt,name=recvOk,proto3" json:"recvOk,omitempty"`
	ReadOk   bool   `protobuf:"varint,5,opt,name=readOk,proto3" json:"readOk,omitempty"`
	ExtraMsg string `protobuf:"bytes,6,opt,name=extraMsg,proto3" json:"extraMsg,omitempty"`
	UserId   int64  `protobuf:"varint,7,opt,name=userId,proto3" json:"userId,omitempty"` // 应答应该发送给谁
}

func (x *MsgChatReply) Reset() {
	*x = MsgChatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChatReply) ProtoMessage() {}

func (x *MsgChatReply) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChatReply.ProtoReflect.Descriptor instead.
func (*MsgChatReply) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{3}
}

func (x *MsgChatReply) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *MsgChatReply) GetSendId() string {
	if x != nil {
		return x.SendId
	}
	return ""
}

func (x *MsgChatReply) GetSendOk() bool {
	if x != nil {
		return x.SendOk
	}
	return false
}

func (x *MsgChatReply) GetRecvOk() bool {
	if x != nil {
		return x.RecvOk
	}
	return false
}

func (x *MsgChatReply) GetReadOk() bool {
	if x != nil {
		return x.ReadOk
	}
	return false
}

func (x *MsgChatReply) GetExtraMsg() string {
	if x != nil {
		return x.ExtraMsg
	}
	return ""
}

func (x *MsgChatReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 登录后查询离线消息，或者查询某些超时的送达和已读
// 向服务器上报自己当前的消息的位置，请求后续的部分
type MsgChatQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"` // 用于存储的clusterKey
	ToId      int64  `protobuf:"varint,2,opt,name=toId,proto3" json:"toId,omitempty"`     // 如果查询私聊的消息不填，如果是查群聊就填写群聊的号码
	Tm        int64  `protobuf:"varint,3,opt,name=tm,proto3" json:"tm,omitempty"`
	ChatType  string `protobuf:"bytes,4,opt,name=chatType,proto3" json:"chatType,omitempty"`    // p2p, group
	StateOnly bool   `protobuf:"varint,5,opt,name=stateOnly,proto3" json:"stateOnly,omitempty"` // 仅仅查询状态，不要聊天数据
}

func (x *MsgChatQuery) Reset() {
	*x = MsgChatQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChatQuery) ProtoMessage() {}

func (x *MsgChatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChatQuery.ProtoReflect.Descriptor instead.
func (*MsgChatQuery) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{4}
}

func (x *MsgChatQuery) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MsgChatQuery) GetToId() int64 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *MsgChatQuery) GetTm() int64 {
	if x != nil {
		return x.Tm
	}
	return 0
}

func (x *MsgChatQuery) GetChatType() string {
	if x != nil {
		return x.ChatType
	}
	return ""
}

func (x *MsgChatQuery) GetStateOnly() bool {
	if x != nil {
		return x.StateOnly
	}
	return false
}

// 上传文件的消息
type MsgUploadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`  // 上传的文件名
	FileSize int64  `protobuf:"varint,2,opt,name=fileSize,proto3" json:"fileSize,omitempty"` // 上传的文件大小
	FileData []byte `protobuf:"bytes,3,opt,name=fileData,proto3" json:"fileData,omitempty"`  // 上传的文件数据
	HashType string `protobuf:"bytes,4,opt,name=hashType,proto3" json:"hashType,omitempty"`  // 文件哈希算法类型（例如：MD5、SHA-256等）
	HashCode []byte `protobuf:"bytes,5,opt,name=hashCode,proto3" json:"hashCode,omitempty"`  // 文件哈希值
	FileType string `protobuf:"bytes,6,opt,name=fileType,proto3" json:"fileType,omitempty"`  // 文件类型（例如：文本、图像、视频等）
	SendId   string `protobuf:"bytes,7,opt,name=sendId,proto3" json:"sendId,omitempty"`      // 用于确认消息的发送 ID
}

func (x *MsgUploadReq) Reset() {
	*x = MsgUploadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUploadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUploadReq) ProtoMessage() {}

func (x *MsgUploadReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgUploadReq.ProtoReflect.Descriptor instead.
func (*MsgUploadReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{5}
}

func (x *MsgUploadReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *MsgUploadReq) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *MsgUploadReq) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *MsgUploadReq) GetHashType() string {
	if x != nil {
		return x.HashType
	}
	return ""
}

func (x *MsgUploadReq) GetHashCode() []byte {
	if x != nil {
		return x.HashCode
	}
	return nil
}

func (x *MsgUploadReq) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *MsgUploadReq) GetSendId() string {
	if x != nil {
		return x.SendId
	}
	return ""
}

// 上传文件的响应消息
type MsgUploadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"` // 上传文件的名称，用于标识文件
	SendId   string `protobuf:"bytes,2,opt,name=sendId,proto3" json:"sendId,omitempty"`     // 用于确认消息的发送 ID
	UuidName string `protobuf:"bytes,3,opt,name=uuidName,proto3" json:"uuidName,omitempty"` // 服务器生成的文件唯一标识，例如存储在服务器上的文件名
	Result   string `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`     // 上传结果或状态信息
}

func (x *MsgUploadReply) Reset() {
	*x = MsgUploadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUploadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUploadReply) ProtoMessage() {}

func (x *MsgUploadReply) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgUploadReply.ProtoReflect.Descriptor instead.
func (*MsgUploadReply) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{6}
}

func (x *MsgUploadReply) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *MsgUploadReply) GetSendId() string {
	if x != nil {
		return x.SendId
	}
	return ""
}

func (x *MsgUploadReply) GetUuidName() string {
	if x != nil {
		return x.UuidName
	}
	return ""
}

func (x *MsgUploadReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// 下载文件的请求消息
type MsgDownloadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendId   string `protobuf:"bytes,1,opt,name=sendId,proto3" json:"sendId,omitempty"`     // 用于确认消息的发送 ID
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"` // 要下载的文件名
	Offset   int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`    // 下载的文件偏移量，如果不需要分片下载，可以忽略
}

func (x *MsgDownloadReq) Reset() {
	*x = MsgDownloadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDownloadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDownloadReq) ProtoMessage() {}

func (x *MsgDownloadReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDownloadReq.ProtoReflect.Descriptor instead.
func (*MsgDownloadReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{7}
}

func (x *MsgDownloadReq) GetSendId() string {
	if x != nil {
		return x.SendId
	}
	return ""
}

func (x *MsgDownloadReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *MsgDownloadReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// 下载文件的响应消息
type MsgDownloadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendId   string `protobuf:"bytes,1,opt,name=sendId,proto3" json:"sendId,omitempty"`     // 用于确认消息的发送 ID
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"` // 要下载的文件名
	RealName string `protobuf:"bytes,3,opt,name=realName,proto3" json:"realName,omitempty"` // 实际保存在服务器上的文件名或标识符
	FileType string `protobuf:"bytes,4,opt,name=fileType,proto3" json:"fileType,omitempty"` // 文件类型（例如：文本、图像、视频等）
	HashType string `protobuf:"bytes,5,opt,name=hashType,proto3" json:"hashType,omitempty"` // 文件哈希算法类型，表示计算文件哈希值所使用的算法（MD5、SHA-256等）
	HashCode []byte `protobuf:"bytes,6,opt,name=hashCode,proto3" json:"hashCode,omitempty"` // 文件哈希值，用于验证文件完整性
	Data     []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`         // 下载的文件数据
	Size     int64  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`        // 文件总大小
	Offset   int64  `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`    // 下载的文件偏移量，如果不需要分片下载，可以忽略
}

func (x *MsgDownloadReply) Reset() {
	*x = MsgDownloadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDownloadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDownloadReply) ProtoMessage() {}

func (x *MsgDownloadReply) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDownloadReply.ProtoReflect.Descriptor instead.
func (*MsgDownloadReply) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{8}
}

func (x *MsgDownloadReply) GetSendId() string {
	if x != nil {
		return x.SendId
	}
	return ""
}

func (x *MsgDownloadReply) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *MsgDownloadReply) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *MsgDownloadReply) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *MsgDownloadReply) GetHashType() string {
	if x != nil {
		return x.HashType
	}
	return ""
}

func (x *MsgDownloadReply) GetHashCode() []byte {
	if x != nil {
		return x.HashCode
	}
	return nil
}

func (x *MsgDownloadReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MsgDownloadReply) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MsgDownloadReply) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// 所有的消息都用
type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32      `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`                       // 协议版本号
	MsgType ComMsgType `protobuf:"varint,2,opt,name=msgType,proto3,enum=model.ComMsgType" json:"msgType,omitempty"` // 通用消息类型
	// Types that are assignable to Message:
	//
	//	*Msg_Hello
	//	*Msg_HeartBeat
	//	*Msg_ChatData
	//	*Msg_ChatReply
	//	*Msg_DownloadReq
	//	*Msg_DownloadReply
	//	*Msg_UploadReq
	//	*Msg_UploadReply
	//	*Msg_UserOp
	//	*Msg_UserOpRet
	//	*Msg_FriendOp
	//	*Msg_FriendOpRet
	//	*Msg_GroupOp
	//	*Msg_GroupOpRet
	Message isMsg_Message `protobuf_oneof:"message"`
	Tm      int64         `protobuf:"varint,20,opt,name=tm,proto3" json:"tm,omitempty"` // 时间戳
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{9}
}

func (x *Msg) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Msg) GetMsgType() ComMsgType {
	if x != nil {
		return x.MsgType
	}
	return ComMsgType_MsgTUnused
}

func (m *Msg) GetMessage() isMsg_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Msg) GetHello() *MsgHello {
	if x, ok := x.GetMessage().(*Msg_Hello); ok {
		return x.Hello
	}
	return nil
}

func (x *Msg) GetHeartBeat() *MsgHeartBeat {
	if x, ok := x.GetMessage().(*Msg_HeartBeat); ok {
		return x.HeartBeat
	}
	return nil
}

func (x *Msg) GetChatData() *MsgChat {
	if x, ok := x.GetMessage().(*Msg_ChatData); ok {
		return x.ChatData
	}
	return nil
}

func (x *Msg) GetChatReply() *MsgChatReply {
	if x, ok := x.GetMessage().(*Msg_ChatReply); ok {
		return x.ChatReply
	}
	return nil
}

func (x *Msg) GetDownloadReq() *MsgDownloadReq {
	if x, ok := x.GetMessage().(*Msg_DownloadReq); ok {
		return x.DownloadReq
	}
	return nil
}

func (x *Msg) GetDownloadReply() *MsgDownloadReply {
	if x, ok := x.GetMessage().(*Msg_DownloadReply); ok {
		return x.DownloadReply
	}
	return nil
}

func (x *Msg) GetUploadReq() *MsgUploadReq {
	if x, ok := x.GetMessage().(*Msg_UploadReq); ok {
		return x.UploadReq
	}
	return nil
}

func (x *Msg) GetUploadReply() *MsgUploadReply {
	if x, ok := x.GetMessage().(*Msg_UploadReply); ok {
		return x.UploadReply
	}
	return nil
}

func (x *Msg) GetUserOp() *UserOpReq {
	if x, ok := x.GetMessage().(*Msg_UserOp); ok {
		return x.UserOp
	}
	return nil
}

func (x *Msg) GetUserOpRet() *UserOpResult {
	if x, ok := x.GetMessage().(*Msg_UserOpRet); ok {
		return x.UserOpRet
	}
	return nil
}

func (x *Msg) GetFriendOp() *FriendOpReq {
	if x, ok := x.GetMessage().(*Msg_FriendOp); ok {
		return x.FriendOp
	}
	return nil
}

func (x *Msg) GetFriendOpRet() *FriendOpResult {
	if x, ok := x.GetMessage().(*Msg_FriendOpRet); ok {
		return x.FriendOpRet
	}
	return nil
}

func (x *Msg) GetGroupOp() *GroupOpReq {
	if x, ok := x.GetMessage().(*Msg_GroupOp); ok {
		return x.GroupOp
	}
	return nil
}

func (x *Msg) GetGroupOpRet() *GroupOpResult {
	if x, ok := x.GetMessage().(*Msg_GroupOpRet); ok {
		return x.GroupOpRet
	}
	return nil
}

func (x *Msg) GetTm() int64 {
	if x != nil {
		return x.Tm
	}
	return 0
}

type isMsg_Message interface {
	isMsg_Message()
}

type Msg_Hello struct {
	Hello *MsgHello `protobuf:"bytes,3,opt,name=hello,proto3,oneof"` // Hello消息
}

type Msg_HeartBeat struct {
	HeartBeat *MsgHeartBeat `protobuf:"bytes,4,opt,name=heartBeat,proto3,oneof"` // 心跳消息
}

type Msg_ChatData struct {
	ChatData *MsgChat `protobuf:"bytes,5,opt,name=chatData,proto3,oneof"` // 聊天消息
}

type Msg_ChatReply struct {
	ChatReply *MsgChatReply `protobuf:"bytes,6,opt,name=chatReply,proto3,oneof"` // 聊天回复消息
}

type Msg_DownloadReq struct {
	DownloadReq *MsgDownloadReq `protobuf:"bytes,7,opt,name=downloadReq,proto3,oneof"` // 下载请求消息
}

type Msg_DownloadReply struct {
	DownloadReply *MsgDownloadReply `protobuf:"bytes,8,opt,name=downloadReply,proto3,oneof"` // 下载回复消息
}

type Msg_UploadReq struct {
	UploadReq *MsgUploadReq `protobuf:"bytes,9,opt,name=uploadReq,proto3,oneof"` // 上传请求消息
}

type Msg_UploadReply struct {
	UploadReply *MsgUploadReply `protobuf:"bytes,10,opt,name=uploadReply,proto3,oneof"` // 上传回复消息
}

type Msg_UserOp struct {
	UserOp *UserOpReq `protobuf:"bytes,11,opt,name=userOp,proto3,oneof"` // 用户操作请求消息
}

type Msg_UserOpRet struct {
	UserOpRet *UserOpResult `protobuf:"bytes,12,opt,name=userOpRet,proto3,oneof"` // 用户操作结果消息
}

type Msg_FriendOp struct {
	FriendOp *FriendOpReq `protobuf:"bytes,13,opt,name=friendOp,proto3,oneof"` // 好友操作请求消息
}

type Msg_FriendOpRet struct {
	FriendOpRet *FriendOpResult `protobuf:"bytes,14,opt,name=friendOpRet,proto3,oneof"` // 好友操作结果消息
}

type Msg_GroupOp struct {
	GroupOp *GroupOpReq `protobuf:"bytes,15,opt,name=groupOp,proto3,oneof"` // 群组操作请求消息
}

type Msg_GroupOpRet struct {
	GroupOpRet *GroupOpResult `protobuf:"bytes,16,opt,name=groupOpRet,proto3,oneof"` // 群组操作结果消息
}

func (*Msg_Hello) isMsg_Message() {}

func (*Msg_HeartBeat) isMsg_Message() {}

func (*Msg_ChatData) isMsg_Message() {}

func (*Msg_ChatReply) isMsg_Message() {}

func (*Msg_DownloadReq) isMsg_Message() {}

func (*Msg_DownloadReply) isMsg_Message() {}

func (*Msg_UploadReq) isMsg_Message() {}

func (*Msg_UploadReply) isMsg_Message() {}

func (*Msg_UserOp) isMsg_Message() {}

func (*Msg_UserOpRet) isMsg_Message() {}

func (*Msg_FriendOp) isMsg_Message() {}

func (*Msg_FriendOpRet) isMsg_Message() {}

func (*Msg_GroupOp) isMsg_Message() {}

func (*Msg_GroupOpRet) isMsg_Message() {}

var File_msg_proto protoreflect.FileDescriptor

var file_msg_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2,
	0x01, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x74, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x89, 0x04, 0x0a, 0x07,
	0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x6f, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74,
	0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x76, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x65, 0x76, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x63, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a,
	0x07, 0x65, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x63, 0x76, 0x4f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x63, 0x76, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x6f, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xce, 0x01, 0x0a, 0x0c, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x0e, 0x4d, 0x73,
	0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x75, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x75, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x5c, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xc9, 0x06, 0x0a, 0x03,
	0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x12, 0x33, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x73, 0x67, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x0b, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x48,
	0x00, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x0b,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x4f,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x4f, 0x70, 0x12, 0x33, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4f, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00,
	0x52, 0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x12, 0x39, 0x0a, 0x0b, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4f, 0x70, 0x52, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x52,
	0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6d, 0x42, 0x09, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0xd5, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x54, 0x55, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x54, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x54, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x54,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x54, 0x4b,
	0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x73, 0x67, 0x54, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x10, 0x05, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x73, 0x67, 0x54, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x06, 0x12, 0x10, 0x0a,
	0x0c, 0x4d, 0x73, 0x67, 0x54, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x07, 0x12,
	0x14, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x54, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x54, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x73,
	0x67, 0x54, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10,
	0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x54, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x0b,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x54, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x10, 0x0c,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x54, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65,
	0x74, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x4f, 0x70, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x10, 0x0f, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x73,
	0x67, 0x54, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x73, 0x67, 0x54, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x10, 0x11, 0x2a,
	0x2c, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x07,
	0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x2a, 0x58, 0x0a,
	0x0d, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x4e, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x2a, 0x24, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x01, 0x32, 0x33, 0x0a,
	0x0a, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x1a, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x73, 0x67, 0x42, 0x10, 0x5a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msg_proto_rawDescOnce sync.Once
	file_msg_proto_rawDescData = file_msg_proto_rawDesc
)

func file_msg_proto_rawDescGZIP() []byte {
	file_msg_proto_rawDescOnce.Do(func() {
		file_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_msg_proto_rawDescData)
	})
	return file_msg_proto_rawDescData
}

var file_msg_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_msg_proto_goTypes = []interface{}{
	(ComMsgType)(0),          // 0: model.ComMsgType
	(MsgPriority)(0),         // 1: model.MsgPriority
	(ChatMsgStatus)(0),       // 2: model.ChatMsgStatus
	(ChatMsgType)(0),         // 3: model.ChatMsgType
	(EncryptType)(0),         // 4: model.EncryptType
	(*MsgHello)(nil),         // 5: model.MsgHello
	(*MsgHeartBeat)(nil),     // 6: model.MsgHeartBeat
	(*MsgChat)(nil),          // 7: model.MsgChat
	(*MsgChatReply)(nil),     // 8: model.MsgChatReply
	(*MsgChatQuery)(nil),     // 9: model.MsgChatQuery
	(*MsgUploadReq)(nil),     // 10: model.MsgUploadReq
	(*MsgUploadReply)(nil),   // 11: model.MsgUploadReply
	(*MsgDownloadReq)(nil),   // 12: model.MsgDownloadReq
	(*MsgDownloadReply)(nil), // 13: model.MsgDownloadReply
	(*Msg)(nil),              // 14: model.Msg
	nil,                      // 15: model.MsgHello.ParamsEntry
	(*UserOpReq)(nil),        // 16: model.UserOpReq
	(*UserOpResult)(nil),     // 17: model.UserOpResult
	(*FriendOpReq)(nil),      // 18: model.FriendOpReq
	(*FriendOpResult)(nil),   // 19: model.FriendOpResult
	(*GroupOpReq)(nil),       // 20: model.GroupOpReq
	(*GroupOpResult)(nil),    // 21: model.GroupOpResult
}
var file_msg_proto_depIdxs = []int32{
	15, // 0: model.MsgHello.params:type_name -> model.MsgHello.ParamsEntry
	3,  // 1: model.MsgChat.msgType:type_name -> model.ChatMsgType
	1,  // 2: model.MsgChat.priority:type_name -> model.MsgPriority
	2,  // 3: model.MsgChat.status:type_name -> model.ChatMsgStatus
	4,  // 4: model.MsgChat.encType:type_name -> model.EncryptType
	0,  // 5: model.Msg.msgType:type_name -> model.ComMsgType
	5,  // 6: model.Msg.hello:type_name -> model.MsgHello
	6,  // 7: model.Msg.heartBeat:type_name -> model.MsgHeartBeat
	7,  // 8: model.Msg.chatData:type_name -> model.MsgChat
	8,  // 9: model.Msg.chatReply:type_name -> model.MsgChatReply
	12, // 10: model.Msg.downloadReq:type_name -> model.MsgDownloadReq
	13, // 11: model.Msg.downloadReply:type_name -> model.MsgDownloadReply
	10, // 12: model.Msg.uploadReq:type_name -> model.MsgUploadReq
	11, // 13: model.Msg.uploadReply:type_name -> model.MsgUploadReply
	16, // 14: model.Msg.userOp:type_name -> model.UserOpReq
	17, // 15: model.Msg.userOpRet:type_name -> model.UserOpResult
	18, // 16: model.Msg.friendOp:type_name -> model.FriendOpReq
	19, // 17: model.Msg.friendOpRet:type_name -> model.FriendOpResult
	20, // 18: model.Msg.groupOp:type_name -> model.GroupOpReq
	21, // 19: model.Msg.groupOpRet:type_name -> model.GroupOpResult
	14, // 20: model.MsgService.ClientEvent:input_type -> model.Msg
	14, // 21: model.MsgService.ClientEvent:output_type -> model.Msg
	21, // [21:22] is the sub-list for method output_type
	20, // [20:21] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_msg_proto_init() }
func file_msg_proto_init() {
	if File_msg_proto != nil {
		return
	}
	file_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChatQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUploadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUploadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDownloadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDownloadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_msg_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Msg_Hello)(nil),
		(*Msg_HeartBeat)(nil),
		(*Msg_ChatData)(nil),
		(*Msg_ChatReply)(nil),
		(*Msg_DownloadReq)(nil),
		(*Msg_DownloadReply)(nil),
		(*Msg_UploadReq)(nil),
		(*Msg_UploadReply)(nil),
		(*Msg_UserOp)(nil),
		(*Msg_UserOpRet)(nil),
		(*Msg_FriendOp)(nil),
		(*Msg_FriendOpRet)(nil),
		(*Msg_GroupOp)(nil),
		(*Msg_GroupOpRet)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_msg_proto_goTypes,
		DependencyIndexes: file_msg_proto_depIdxs,
		EnumInfos:         file_msg_proto_enumTypes,
		MessageInfos:      file_msg_proto_msgTypes,
	}.Build()
	File_msg_proto = out.File
	file_msg_proto_rawDesc = nil
	file_msg_proto_goTypes = nil
	file_msg_proto_depIdxs = nil
}
