// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: msg.proto

// package com.birdfish.model;

package pbmodel

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 消息优先级
type MsgPriority int32

const (
	MsgPriority_LOW    MsgPriority = 0
	MsgPriority_NORMAL MsgPriority = 1
	MsgPriority_HIGH   MsgPriority = 2 // 其他优先级...
)

// Enum value maps for MsgPriority.
var (
	MsgPriority_name = map[int32]string{
		0: "LOW",
		1: "NORMAL",
		2: "HIGH",
	}
	MsgPriority_value = map[string]int32{
		"LOW":    0,
		"NORMAL": 1,
		"HIGH":   2,
	}
)

func (x MsgPriority) Enum() *MsgPriority {
	p := new(MsgPriority)
	*p = x
	return p
}

func (x MsgPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[0].Descriptor()
}

func (MsgPriority) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[0]
}

func (x MsgPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgPriority.Descriptor instead.
func (MsgPriority) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

// 消息状态
type ChatMsgStatus int32

const (
	ChatMsgStatus_SENDING   ChatMsgStatus = 0
	ChatMsgStatus_SENT      ChatMsgStatus = 1 // 已经发送完成
	ChatMsgStatus_FAILED    ChatMsgStatus = 2 // 失败
	ChatMsgStatus_DELIVERED ChatMsgStatus = 3 // 送达
	ChatMsgStatus_READ      ChatMsgStatus = 4 // 已读
	ChatMsgStatus_DELETED   ChatMsgStatus = 5 // 已经删除
)

// Enum value maps for ChatMsgStatus.
var (
	ChatMsgStatus_name = map[int32]string{
		0: "SENDING",
		1: "SENT",
		2: "FAILED",
		3: "DELIVERED",
		4: "READ",
		5: "DELETED",
	}
	ChatMsgStatus_value = map[string]int32{
		"SENDING":   0,
		"SENT":      1,
		"FAILED":    2,
		"DELIVERED": 3,
		"READ":      4,
		"DELETED":   5,
	}
)

func (x ChatMsgStatus) Enum() *ChatMsgStatus {
	p := new(ChatMsgStatus)
	*p = x
	return p
}

func (x ChatMsgStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatMsgStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[1].Descriptor()
}

func (ChatMsgStatus) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[1]
}

func (x ChatMsgStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatMsgStatus.Descriptor instead.
func (ChatMsgStatus) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1}
}

type ChatMsgType int32

const (
	ChatMsgType_TEXT   ChatMsgType = 0
	ChatMsgType_IMAGE  ChatMsgType = 1
	ChatMsgType_VOICE  ChatMsgType = 2
	ChatMsgType_VIDEO  ChatMsgType = 3
	ChatMsgType_FILE   ChatMsgType = 4
	ChatMsgType_DELETE ChatMsgType = 5 // 删除之前的消息
	ChatMsgType_KEY    ChatMsgType = 6 // 会话秘钥协商
	ChatMsgType_PLUGIN ChatMsgType = 100
)

// Enum value maps for ChatMsgType.
var (
	ChatMsgType_name = map[int32]string{
		0:   "TEXT",
		1:   "IMAGE",
		2:   "VOICE",
		3:   "VIDEO",
		4:   "FILE",
		5:   "DELETE",
		6:   "KEY",
		100: "PLUGIN",
	}
	ChatMsgType_value = map[string]int32{
		"TEXT":   0,
		"IMAGE":  1,
		"VOICE":  2,
		"VIDEO":  3,
		"FILE":   4,
		"DELETE": 5,
		"KEY":    6,
		"PLUGIN": 100,
	}
)

func (x ChatMsgType) Enum() *ChatMsgType {
	p := new(ChatMsgType)
	*p = x
	return p
}

func (x ChatMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[2].Descriptor()
}

func (ChatMsgType) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[2]
}

func (x ChatMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatMsgType.Descriptor instead.
func (ChatMsgType) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{2}
}

// 私聊的加密方式
type EncryptType int32

const (
	EncryptType_PLAIN    EncryptType = 0
	EncryptType_CUSTOM   EncryptType = 1
	EncryptType_CHACHA20 EncryptType = 2
	EncryptType_TWOFISH  EncryptType = 3
	EncryptType_AES      EncryptType = 4
)

// Enum value maps for EncryptType.
var (
	EncryptType_name = map[int32]string{
		0: "PLAIN",
		1: "CUSTOM",
		2: "CHACHA20",
		3: "TWOFISH",
		4: "AES",
	}
	EncryptType_value = map[string]int32{
		"PLAIN":    0,
		"CUSTOM":   1,
		"CHACHA20": 2,
		"TWOFISH":  3,
		"AES":      4,
	}
)

func (x EncryptType) Enum() *EncryptType {
	p := new(EncryptType)
	*p = x
	return p
}

func (x EncryptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[3].Descriptor()
}

func (EncryptType) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[3]
}

func (x EncryptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptType.Descriptor instead.
func (EncryptType) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{3}
}

// 聊天类型2种：
type ChatType int32

const (
	ChatType_ChatTypeNone  ChatType = 0
	ChatType_ChatTypeP2P   ChatType = 1
	ChatType_ChatTypeGroup ChatType = 2
)

// Enum value maps for ChatType.
var (
	ChatType_name = map[int32]string{
		0: "ChatTypeNone",
		1: "ChatTypeP2P",
		2: "ChatTypeGroup",
	}
	ChatType_value = map[string]int32{
		"ChatTypeNone":  0,
		"ChatTypeP2P":   1,
		"ChatTypeGroup": 2,
	}
)

func (x ChatType) Enum() *ChatType {
	p := new(ChatType)
	*p = x
	return p
}

func (x ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[4].Descriptor()
}

func (ChatType) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[4]
}

func (x ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatType.Descriptor instead.
func (ChatType) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{4}
}

// 查询的类型：聊天数据，回执,关键字搜索
type QueryDataType int32

const (
	QueryDataType_QueryDataTypeChatData  QueryDataType = 0
	QueryDataType_QueryDataTypeChatReply QueryDataType = 1
	QueryDataType_QueryDataTypeFriendOP  QueryDataType = 2
	QueryDataType_QueryDataTypeGroupOP   QueryDataType = 3
)

// Enum value maps for QueryDataType.
var (
	QueryDataType_name = map[int32]string{
		0: "QueryDataTypeChatData",
		1: "QueryDataTypeChatReply",
		2: "QueryDataTypeFriendOP",
		3: "QueryDataTypeGroupOP",
	}
	QueryDataType_value = map[string]int32{
		"QueryDataTypeChatData":  0,
		"QueryDataTypeChatReply": 1,
		"QueryDataTypeFriendOP":  2,
		"QueryDataTypeGroupOP":   3,
	}
)

func (x QueryDataType) Enum() *QueryDataType {
	p := new(QueryDataType)
	*p = x
	return p
}

func (x QueryDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[5].Descriptor()
}

func (QueryDataType) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[5]
}

func (x QueryDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryDataType.Descriptor instead.
func (QueryDataType) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{5}
}

// 同步方式，3种
type SynType int32

const (
	SynType_SynTypeForward  SynType = 0
	SynType_SynTypeBackward SynType = 1
	SynType_SynTypeBetween  SynType = 2
)

// Enum value maps for SynType.
var (
	SynType_name = map[int32]string{
		0: "SynTypeForward",
		1: "SynTypeBackward",
		2: "SynTypeBetween",
	}
	SynType_value = map[string]int32{
		"SynTypeForward":  0,
		"SynTypeBackward": 1,
		"SynTypeBetween":  2,
	}
)

func (x SynType) Enum() *SynType {
	p := new(SynType)
	*p = x
	return p
}

func (x SynType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SynType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[6].Descriptor()
}

func (SynType) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[6]
}

func (x SynType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SynType.Descriptor instead.
func (SynType) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{6}
}

// 错误消息类型
type ErrorMsgType int32

const (
	ErrorMsgType_ErrTNone          ErrorMsgType = 0
	ErrorMsgType_ErrTVersion       ErrorMsgType = 1
	ErrorMsgType_ErrTKeyPrint      ErrorMsgType = 2
	ErrorMsgType_ErrTRedirect      ErrorMsgType = 3
	ErrorMsgType_ErrTWrongPwd      ErrorMsgType = 4 // 密码错误
	ErrorMsgType_ErrTWrongCode     ErrorMsgType = 5 // 验证码错误
	ErrorMsgType_ErrTRsaPrint      ErrorMsgType = 6 // 公钥错误
	ErrorMsgType_ErrTTempKey       ErrorMsgType = 7 // 临时秘钥设置错误
	ErrorMsgType_ErrTEncType       ErrorMsgType = 8 // 加密算法不支持
	ErrorMsgType_ErrTServerInside  ErrorMsgType = 9
	ErrorMsgType_ErrTStage         ErrorMsgType = 10 // 阶段字段设置错误
	ErrorMsgType_ErrTPublicKey     ErrorMsgType = 11 // 65 字节
	ErrorMsgType_ErrTKeyConflict   ErrorMsgType = 12 // 指纹碰撞
	ErrorMsgType_ErrTCheckData     ErrorMsgType = 13 // 解密后验证秘钥
	ErrorMsgType_ErrTMsgContent    ErrorMsgType = 14 // 消息内容与类型不匹配
	ErrorMsgType_ErrTNotLogin      ErrorMsgType = 15 // 未登录
	ErrorMsgType_ErrTNotPermission ErrorMsgType = 16 // 权限不够
	ErrorMsgType_ErrTDisabled      ErrorMsgType = 17 // 用户或者帖子被禁用了
	ErrorMsgType_ErrTDeleted       ErrorMsgType = 18 // 用户或者消息被删除了
	ErrorMsgType_ErrTEmail         ErrorMsgType = 19 // 邮件验证码发送错误
	ErrorMsgType_ErrTPhone         ErrorMsgType = 20 // 手机验证码发送错误
)

// Enum value maps for ErrorMsgType.
var (
	ErrorMsgType_name = map[int32]string{
		0:  "ErrTNone",
		1:  "ErrTVersion",
		2:  "ErrTKeyPrint",
		3:  "ErrTRedirect",
		4:  "ErrTWrongPwd",
		5:  "ErrTWrongCode",
		6:  "ErrTRsaPrint",
		7:  "ErrTTempKey",
		8:  "ErrTEncType",
		9:  "ErrTServerInside",
		10: "ErrTStage",
		11: "ErrTPublicKey",
		12: "ErrTKeyConflict",
		13: "ErrTCheckData",
		14: "ErrTMsgContent",
		15: "ErrTNotLogin",
		16: "ErrTNotPermission",
		17: "ErrTDisabled",
		18: "ErrTDeleted",
		19: "ErrTEmail",
		20: "ErrTPhone",
	}
	ErrorMsgType_value = map[string]int32{
		"ErrTNone":          0,
		"ErrTVersion":       1,
		"ErrTKeyPrint":      2,
		"ErrTRedirect":      3,
		"ErrTWrongPwd":      4,
		"ErrTWrongCode":     5,
		"ErrTRsaPrint":      6,
		"ErrTTempKey":       7,
		"ErrTEncType":       8,
		"ErrTServerInside":  9,
		"ErrTStage":         10,
		"ErrTPublicKey":     11,
		"ErrTKeyConflict":   12,
		"ErrTCheckData":     13,
		"ErrTMsgContent":    14,
		"ErrTNotLogin":      15,
		"ErrTNotPermission": 16,
		"ErrTDisabled":      17,
		"ErrTDeleted":       18,
		"ErrTEmail":         19,
		"ErrTPhone":         20,
	}
)

func (x ErrorMsgType) Enum() *ErrorMsgType {
	p := new(ErrorMsgType)
	*p = x
	return p
}

func (x ErrorMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[7].Descriptor()
}

func (ErrorMsgType) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[7]
}

func (x ErrorMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorMsgType.Descriptor instead.
func (ErrorMsgType) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{7}
}

// 通用所有消息类型的定义
type ComMsgType int32

const (
	ComMsgType_MsgTUnused        ComMsgType = 0 // 未使用的消息类型
	ComMsgType_MsgTHello         ComMsgType = 1 // 用于握手的消息
	ComMsgType_MsgTHeartBeat     ComMsgType = 2 // 用于保持连接的心跳消息
	ComMsgType_MsgTError         ComMsgType = 3 // 用于传递错误信息的消息
	ComMsgType_MsgTKeyExchange   ComMsgType = 4 // DH密钥交换的消息
	ComMsgType_MsgTChatMsg       ComMsgType = 11
	ComMsgType_MsgTChatReply     ComMsgType = 12
	ComMsgType_MsgTQuery         ComMsgType = 13 // 查询消息应该放在ChatMsg外面，
	ComMsgType_MsgTQueryResult   ComMsgType = 14 // 推送的消息单个发送，查询才以组发送
	ComMsgType_MsgTUpload        ComMsgType = 21 // 上传文件的消息
	ComMsgType_MsgTDownload      ComMsgType = 22 // 下载文件的消息，文件操作分为带内和带外，这里是小文件可以这样操作
	ComMsgType_MsgTUploadReply   ComMsgType = 23
	ComMsgType_MsgTDownloadReply ComMsgType = 24
	// 用户与群组消息一共是6大类，
	ComMsgType_MsgTUserOp      ComMsgType = 31 // 所有用户相关操作的消息
	ComMsgType_MsgTUserOpRet   ComMsgType = 32
	ComMsgType_MsgTFriendOp    ComMsgType = 33
	ComMsgType_MsgTFriendOpRet ComMsgType = 34
	ComMsgType_MsgTGroupOp     ComMsgType = 35 // 所有群组相关的操作
	ComMsgType_MsgTGroupOpRet  ComMsgType = 36
	ComMsgType_MsgTOther       ComMsgType = 100 // 转发给其他的扩展模块的
)

// Enum value maps for ComMsgType.
var (
	ComMsgType_name = map[int32]string{
		0:   "MsgTUnused",
		1:   "MsgTHello",
		2:   "MsgTHeartBeat",
		3:   "MsgTError",
		4:   "MsgTKeyExchange",
		11:  "MsgTChatMsg",
		12:  "MsgTChatReply",
		13:  "MsgTQuery",
		14:  "MsgTQueryResult",
		21:  "MsgTUpload",
		22:  "MsgTDownload",
		23:  "MsgTUploadReply",
		24:  "MsgTDownloadReply",
		31:  "MsgTUserOp",
		32:  "MsgTUserOpRet",
		33:  "MsgTFriendOp",
		34:  "MsgTFriendOpRet",
		35:  "MsgTGroupOp",
		36:  "MsgTGroupOpRet",
		100: "MsgTOther",
	}
	ComMsgType_value = map[string]int32{
		"MsgTUnused":        0,
		"MsgTHello":         1,
		"MsgTHeartBeat":     2,
		"MsgTError":         3,
		"MsgTKeyExchange":   4,
		"MsgTChatMsg":       11,
		"MsgTChatReply":     12,
		"MsgTQuery":         13,
		"MsgTQueryResult":   14,
		"MsgTUpload":        21,
		"MsgTDownload":      22,
		"MsgTUploadReply":   23,
		"MsgTDownloadReply": 24,
		"MsgTUserOp":        31,
		"MsgTUserOpRet":     32,
		"MsgTFriendOp":      33,
		"MsgTFriendOpRet":   34,
		"MsgTGroupOp":       35,
		"MsgTGroupOpRet":    36,
		"MsgTOther":         100,
	}
)

func (x ComMsgType) Enum() *ComMsgType {
	p := new(ComMsgType)
	*p = x
	return p
}

func (x ComMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[8].Descriptor()
}

func (ComMsgType) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[8]
}

func (x ComMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComMsgType.Descriptor instead.
func (ComMsgType) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{8}
}

// 首先需要同步客户端的基础信息，服务端应答各种信息
type MsgHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"` // 客户端标识，用于区分不同客户端
	Version  string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`   // 客户端的版本信息
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"` // 客户端运行的平台信息（例如：iOS、Android、Windows等）
	// 其他可能的字段，取决于你的需求
	Stage    string            `protobuf:"bytes,5,opt,name=stage,proto3" json:"stage,omitempty"`                                                                                           // 状态数据, clienthello, serverhello,
	KeyPrint int64             `protobuf:"varint,6,opt,name=keyPrint,proto3" json:"keyPrint,omitempty"`                                                                                    // 对称密钥指纹，用于SID
	RsaPrint int64             `protobuf:"varint,7,opt,name=rsaPrint,proto3" json:"rsaPrint,omitempty"`                                                                                    // 自己的公钥指纹
	Params   map[string]string `protobuf:"bytes,8,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // redirect->ip:port, dht
}

func (x *MsgHello) Reset() {
	*x = MsgHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHello) ProtoMessage() {}

func (x *MsgHello) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHello.ProtoReflect.Descriptor instead.
func (*MsgHello) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

func (x *MsgHello) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MsgHello) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MsgHello) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *MsgHello) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *MsgHello) GetKeyPrint() int64 {
	if x != nil {
		return x.KeyPrint
	}
	return 0
}

func (x *MsgHello) GetRsaPrint() int64 {
	if x != nil {
		return x.RsaPrint
	}
	return 0
}

func (x *MsgHello) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// DL秘钥交换的信息
// 1. 发起端(客户端使用对方RSA公钥加密临时秘钥给对方)，同时传递的还有秘钥对公钥
// 2. 服务端将，使用临时秘钥加密秘钥对公钥，算法为ChaCha20, aes256, twofish128
// 3. 客户将此时双方已经可以计算出共享密钥；用共享密钥加密临时秘钥，并根据加密算法生成秘钥，计算HASH,取8节作为指纹，
// 4. 服务端计算共享密钥，用共享密钥加密临时秘钥，并计算MD5，校验；
// 5， 如果校验成功，应答OK，如果失败应答FAIL
type MsgKeyExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyPrint int64  `protobuf:"varint,1,opt,name=keyPrint,proto3" json:"keyPrint,omitempty"`
	RsaPrint int64  `protobuf:"varint,2,opt,name=rsaPrint,proto3" json:"rsaPrint,omitempty"`
	Stage    int32  `protobuf:"varint,3,opt,name=stage,proto3" json:"stage,omitempty"`    // 当前处于状态机
	TempKey  []byte `protobuf:"bytes,4,opt,name=tempKey,proto3" json:"tempKey,omitempty"` // 临时秘钥，需要RSA加密
	PubKey   []byte `protobuf:"bytes,5,opt,name=pubKey,proto3" json:"pubKey,omitempty"`   // 临时公钥，需要RSA加密
	EncType  string `protobuf:"bytes,6,opt,name=encType,proto3" json:"encType,omitempty"` // plain, rsa加密，对阵加密类型
	Status   string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`   // ok, fail
	Detail   string `protobuf:"bytes,8,opt,name=detail,proto3" json:"detail,omitempty"`   // 错误信息
}

func (x *MsgKeyExchange) Reset() {
	*x = MsgKeyExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgKeyExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgKeyExchange) ProtoMessage() {}

func (x *MsgKeyExchange) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgKeyExchange.ProtoReflect.Descriptor instead.
func (*MsgKeyExchange) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1}
}

func (x *MsgKeyExchange) GetKeyPrint() int64 {
	if x != nil {
		return x.KeyPrint
	}
	return 0
}

func (x *MsgKeyExchange) GetRsaPrint() int64 {
	if x != nil {
		return x.RsaPrint
	}
	return 0
}

func (x *MsgKeyExchange) GetStage() int32 {
	if x != nil {
		return x.Stage
	}
	return 0
}

func (x *MsgKeyExchange) GetTempKey() []byte {
	if x != nil {
		return x.TempKey
	}
	return nil
}

func (x *MsgKeyExchange) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *MsgKeyExchange) GetEncType() string {
	if x != nil {
		return x.EncType
	}
	return ""
}

func (x *MsgKeyExchange) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MsgKeyExchange) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type MsgHeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tm     int64 `protobuf:"varint,1,opt,name=tm,proto3" json:"tm,omitempty"`
	UserId int64 `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *MsgHeartBeat) Reset() {
	*x = MsgHeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHeartBeat) ProtoMessage() {}

func (x *MsgHeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHeartBeat.ProtoReflect.Descriptor instead.
func (*MsgHeartBeat) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{2}
}

func (x *MsgHeartBeat) GetTm() int64 {
	if x != nil {
		return x.Tm
	}
	return 0
}

func (x *MsgHeartBeat) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 聊天存储的基本信息
type MsgChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId        int64             `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId,omitempty"`                               // 消息的全网唯一标识，服务端使用雪花算法生成，因为客户端生成的不可靠
	UserId       int64             `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`                             // 用于存储的clusterKey，因为一份消息要存储2次，要转发，需要有这个字段
	FromId       int64             `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`                             // 发送消息的用户 ID
	ToId         int64             `protobuf:"varint,4,opt,name=toId,proto3" json:"toId,omitempty"`                                 // 接收消息的用户 ID（对方的用户 ID）
	Tm           int64             `protobuf:"varint,5,opt,name=tm,proto3" json:"tm,omitempty"`                                     // 消息的时间戳
	DevId        string            `protobuf:"bytes,6,opt,name=devId,proto3" json:"devId,omitempty"`                                // 多设备登录时的设备 ID
	SendId       int64             `protobuf:"varint,7,opt,name=sendId,proto3" json:"sendId,omitempty"`                             // 用于确认消息的发送 ID
	MsgType      ChatMsgType       `protobuf:"varint,8,opt,name=msgType,proto3,enum=model.ChatMsgType" json:"msgType,omitempty"`    // 消息类型，建议使用枚举
	Data         []byte            `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`                                  // 消息的内容，可以使用 bytes 存储二进制数据或文本数据
	Priority     MsgPriority       `protobuf:"varint,10,opt,name=priority,proto3,enum=model.MsgPriority" json:"priority,omitempty"` // 消息的优先级，建议使用枚举
	RefMessageId int64             `protobuf:"varint,11,opt,name=refMessageId,proto3" json:"refMessageId,omitempty"`                // 引用的消息 ID，如果有的话
	Status       ChatMsgStatus     `protobuf:"varint,12,opt,name=status,proto3,enum=model.ChatMsgStatus" json:"status,omitempty"`   // 消息状态，建议使用枚举
	SendReply    int64             `protobuf:"varint,13,opt,name=sendReply,proto3" json:"sendReply,omitempty"`                      // 发送消息的回执状态
	RecvReply    int64             `protobuf:"varint,14,opt,name=recvReply,proto3" json:"recvReply,omitempty"`                      // 接收消息的回执状态
	ReadReply    int64             `protobuf:"varint,15,opt,name=readReply,proto3" json:"readReply,omitempty"`                      // 已读状态的回执
	EncType      EncryptType       `protobuf:"varint,16,opt,name=encType,proto3,enum=model.EncryptType" json:"encType,omitempty"`   // 加密类型
	ChatType     ChatType          `protobuf:"varint,17,opt,name=chatType,proto3,enum=model.ChatType" json:"chatType,omitempty"`    // p2p, group, system
	SubMsgType   int32             `protobuf:"varint,18,opt,name=subMsgType,proto3" json:"subMsgType,omitempty"`                    // 传递给插件区分代码，插件都注册为整数类型，
	KeyPrint     int64             `protobuf:"varint,19,opt,name=keyPrint,proto3" json:"keyPrint,omitempty"`                        // 秘钥指纹
	Params       map[string]string `protobuf:"bytes,30,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MsgChat) Reset() {
	*x = MsgChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChat) ProtoMessage() {}

func (x *MsgChat) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChat.ProtoReflect.Descriptor instead.
func (*MsgChat) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{3}
}

func (x *MsgChat) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *MsgChat) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MsgChat) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *MsgChat) GetToId() int64 {
	if x != nil {
		return x.ToId
	}
	return 0
}

func (x *MsgChat) GetTm() int64 {
	if x != nil {
		return x.Tm
	}
	return 0
}

func (x *MsgChat) GetDevId() string {
	if x != nil {
		return x.DevId
	}
	return ""
}

func (x *MsgChat) GetSendId() int64 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *MsgChat) GetMsgType() ChatMsgType {
	if x != nil {
		return x.MsgType
	}
	return ChatMsgType_TEXT
}

func (x *MsgChat) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MsgChat) GetPriority() MsgPriority {
	if x != nil {
		return x.Priority
	}
	return MsgPriority_LOW
}

func (x *MsgChat) GetRefMessageId() int64 {
	if x != nil {
		return x.RefMessageId
	}
	return 0
}

func (x *MsgChat) GetStatus() ChatMsgStatus {
	if x != nil {
		return x.Status
	}
	return ChatMsgStatus_SENDING
}

func (x *MsgChat) GetSendReply() int64 {
	if x != nil {
		return x.SendReply
	}
	return 0
}

func (x *MsgChat) GetRecvReply() int64 {
	if x != nil {
		return x.RecvReply
	}
	return 0
}

func (x *MsgChat) GetReadReply() int64 {
	if x != nil {
		return x.ReadReply
	}
	return 0
}

func (x *MsgChat) GetEncType() EncryptType {
	if x != nil {
		return x.EncType
	}
	return EncryptType_PLAIN
}

func (x *MsgChat) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeNone
}

func (x *MsgChat) GetSubMsgType() int32 {
	if x != nil {
		return x.SubMsgType
	}
	return 0
}

func (x *MsgChat) GetKeyPrint() int64 {
	if x != nil {
		return x.KeyPrint
	}
	return 0
}

func (x *MsgChat) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// 消息确认，上传下载的确认
type MsgChatReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId    int64             `protobuf:"varint,1,opt,name=msgId,proto3" json:"msgId,omitempty"` // 要确认的消息ID
	SendId   int64             `protobuf:"varint,2,opt,name=sendId,proto3" json:"sendId,omitempty"`
	SendOk   bool              `protobuf:"varint,3,opt,name=sendOk,proto3" json:"sendOk,omitempty"` // 确认是否成功
	RecvOk   bool              `protobuf:"varint,4,opt,name=recvOk,proto3" json:"recvOk,omitempty"`
	ReadOk   bool              `protobuf:"varint,5,opt,name=readOk,proto3" json:"readOk,omitempty"`
	ExtraMsg string            `protobuf:"bytes,6,opt,name=extraMsg,proto3" json:"extraMsg,omitempty"`
	UserId   int64             `protobuf:"varint,7,opt,name=userId,proto3" json:"userId,omitempty"` // 应答应该发送给谁
	FromId   int64             `protobuf:"varint,8,opt,name=fromId,proto3" json:"fromId,omitempty"` // 从谁那的应答
	Params   map[string]string `protobuf:"bytes,30,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MsgChatReply) Reset() {
	*x = MsgChatReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgChatReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgChatReply) ProtoMessage() {}

func (x *MsgChatReply) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgChatReply.ProtoReflect.Descriptor instead.
func (*MsgChatReply) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{4}
}

func (x *MsgChatReply) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *MsgChatReply) GetSendId() int64 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *MsgChatReply) GetSendOk() bool {
	if x != nil {
		return x.SendOk
	}
	return false
}

func (x *MsgChatReply) GetRecvOk() bool {
	if x != nil {
		return x.RecvOk
	}
	return false
}

func (x *MsgChatReply) GetReadOk() bool {
	if x != nil {
		return x.ReadOk
	}
	return false
}

func (x *MsgChatReply) GetExtraMsg() string {
	if x != nil {
		return x.ExtraMsg
	}
	return ""
}

func (x *MsgChatReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MsgChatReply) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *MsgChatReply) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// 登录后查询离线消息，或者查询某些超时的送达和已读
// 向服务器上报自己当前的消息的位置，请求后续的部分
// 可能会答应一组消息，也可能应答一组应答，还可能是搜索结果
// 目前数据库还不能支持复杂的关键字搜索；
type MsgQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64             `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`                      // 用户ID
	GroupId   int64             `protobuf:"varint,2,opt,name=groupId,proto3" json:"groupId,omitempty"`                    // 如果查询私聊的消息不填，如果是查群聊就填写群聊的号码
	BigId     int64             `protobuf:"varint,3,opt,name=bigId,proto3" json:"bigId,omitempty"`                        // 这里是消息的范围
	LittleId  int64             `protobuf:"varint,4,opt,name=littleId,proto3" json:"littleId,omitempty"`                  // 消息范围
	SynType   SynType           `protobuf:"varint,5,opt,name=synType,proto3,enum=model.SynType" json:"synType,omitempty"` // 正向=0，反向=1
	Tm        int64             `protobuf:"varint,6,opt,name=tm,proto3" json:"tm,omitempty"`
	ChatType  ChatType          `protobuf:"varint,7,opt,name=chatType,proto3,enum=model.ChatType" json:"chatType,omitempty"`        // p2p, group
	QueryType QueryDataType     `protobuf:"varint,8,opt,name=queryType,proto3,enum=model.QueryDataType" json:"queryType,omitempty"` // data, reply
	Params    map[string]string `protobuf:"bytes,9,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MsgQuery) Reset() {
	*x = MsgQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgQuery) ProtoMessage() {}

func (x *MsgQuery) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgQuery.ProtoReflect.Descriptor instead.
func (*MsgQuery) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{5}
}

func (x *MsgQuery) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MsgQuery) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MsgQuery) GetBigId() int64 {
	if x != nil {
		return x.BigId
	}
	return 0
}

func (x *MsgQuery) GetLittleId() int64 {
	if x != nil {
		return x.LittleId
	}
	return 0
}

func (x *MsgQuery) GetSynType() SynType {
	if x != nil {
		return x.SynType
	}
	return SynType_SynTypeForward
}

func (x *MsgQuery) GetTm() int64 {
	if x != nil {
		return x.Tm
	}
	return 0
}

func (x *MsgQuery) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeNone
}

func (x *MsgQuery) GetQueryType() QueryDataType {
	if x != nil {
		return x.QueryType
	}
	return QueryDataType_QueryDataTypeChatData
}

func (x *MsgQuery) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// 查询的回执
type MsgQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          int64             `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`                      // 用于存储的clusterKey
	GroupId         int64             `protobuf:"varint,2,opt,name=groupId,proto3" json:"groupId,omitempty"`                    // 如果查询私聊的消息不填，如果是查群聊就填写群聊的号码
	BigId           int64             `protobuf:"varint,3,opt,name=bigId,proto3" json:"bigId,omitempty"`                        // 这里是消息的范围
	LittleId        int64             `protobuf:"varint,4,opt,name=littleId,proto3" json:"littleId,omitempty"`                  // 消息范围
	SynType         SynType           `protobuf:"varint,5,opt,name=synType,proto3,enum=model.SynType" json:"synType,omitempty"` // 正向=0，反向=1
	Tm              int64             `protobuf:"varint,6,opt,name=tm,proto3" json:"tm,omitempty"`
	ChatType        ChatType          `protobuf:"varint,7,opt,name=chatType,proto3,enum=model.ChatType" json:"chatType,omitempty"`        // p2p, group
	QueryType       QueryDataType     `protobuf:"varint,8,opt,name=queryType,proto3,enum=model.QueryDataType" json:"queryType,omitempty"` // data, reply
	ChatDataList    []*MsgChat        `protobuf:"bytes,11,rep,name=chatDataList,proto3" json:"chatDataList,omitempty"`
	ChatReplyList   []*MsgChatReply   `protobuf:"bytes,12,rep,name=chatReplyList,proto3" json:"chatReplyList,omitempty"`
	FriendOpRetList []*FriendOpResult `protobuf:"bytes,13,rep,name=friendOpRetList,proto3" json:"friendOpRetList,omitempty"`
	GroupOpRetList  []*GroupOpResult  `protobuf:"bytes,14,rep,name=groupOpRetList,proto3" json:"groupOpRetList,omitempty"`
	Params          map[string]string `protobuf:"bytes,30,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MsgQueryResult) Reset() {
	*x = MsgQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgQueryResult) ProtoMessage() {}

func (x *MsgQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgQueryResult.ProtoReflect.Descriptor instead.
func (*MsgQueryResult) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{6}
}

func (x *MsgQueryResult) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MsgQueryResult) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *MsgQueryResult) GetBigId() int64 {
	if x != nil {
		return x.BigId
	}
	return 0
}

func (x *MsgQueryResult) GetLittleId() int64 {
	if x != nil {
		return x.LittleId
	}
	return 0
}

func (x *MsgQueryResult) GetSynType() SynType {
	if x != nil {
		return x.SynType
	}
	return SynType_SynTypeForward
}

func (x *MsgQueryResult) GetTm() int64 {
	if x != nil {
		return x.Tm
	}
	return 0
}

func (x *MsgQueryResult) GetChatType() ChatType {
	if x != nil {
		return x.ChatType
	}
	return ChatType_ChatTypeNone
}

func (x *MsgQueryResult) GetQueryType() QueryDataType {
	if x != nil {
		return x.QueryType
	}
	return QueryDataType_QueryDataTypeChatData
}

func (x *MsgQueryResult) GetChatDataList() []*MsgChat {
	if x != nil {
		return x.ChatDataList
	}
	return nil
}

func (x *MsgQueryResult) GetChatReplyList() []*MsgChatReply {
	if x != nil {
		return x.ChatReplyList
	}
	return nil
}

func (x *MsgQueryResult) GetFriendOpRetList() []*FriendOpResult {
	if x != nil {
		return x.FriendOpRetList
	}
	return nil
}

func (x *MsgQueryResult) GetGroupOpRetList() []*GroupOpResult {
	if x != nil {
		return x.GroupOpRetList
	}
	return nil
}

func (x *MsgQueryResult) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// 上传文件的消息
type MsgUploadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName   string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`      // 上传的文件名
	FileSize   int64  `protobuf:"varint,2,opt,name=fileSize,proto3" json:"fileSize,omitempty"`     // 上传的文件大小
	FileData   []byte `protobuf:"bytes,3,opt,name=fileData,proto3" json:"fileData,omitempty"`      // 上传的文件数据
	HashType   string `protobuf:"bytes,4,opt,name=hashType,proto3" json:"hashType,omitempty"`      // 文件哈希算法类型（例如：MD5、SHA-256等）
	HashCode   string `protobuf:"bytes,5,opt,name=hashCode,proto3" json:"hashCode,omitempty"`      // 文件哈希值
	FileType   string `protobuf:"bytes,6,opt,name=fileType,proto3" json:"fileType,omitempty"`      // 文件类型（例如：文本、图像、视频等）
	SendId     int64  `protobuf:"varint,7,opt,name=sendId,proto3" json:"sendId,omitempty"`         // 用于确认消息的发送 ID
	ChunkIndex int32  `protobuf:"varint,8,opt,name=chunkIndex,proto3" json:"chunkIndex,omitempty"` // 块编号
	ChunkCount int32  `protobuf:"varint,9,opt,name=chunkCount,proto3" json:"chunkCount,omitempty"` // 总块数
	ChunkSize  int32  `protobuf:"varint,10,opt,name=chunkSize,proto3" json:"chunkSize,omitempty"`  // 切块大小
	GroupId    int64  `protobuf:"varint,11,opt,name=groupId,proto3" json:"groupId,omitempty"`
}

func (x *MsgUploadReq) Reset() {
	*x = MsgUploadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUploadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUploadReq) ProtoMessage() {}

func (x *MsgUploadReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgUploadReq.ProtoReflect.Descriptor instead.
func (*MsgUploadReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{7}
}

func (x *MsgUploadReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *MsgUploadReq) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *MsgUploadReq) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *MsgUploadReq) GetHashType() string {
	if x != nil {
		return x.HashType
	}
	return ""
}

func (x *MsgUploadReq) GetHashCode() string {
	if x != nil {
		return x.HashCode
	}
	return ""
}

func (x *MsgUploadReq) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *MsgUploadReq) GetSendId() int64 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *MsgUploadReq) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *MsgUploadReq) GetChunkCount() int32 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *MsgUploadReq) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *MsgUploadReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// 上传文件的响应消息
type MsgUploadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName   string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`      // 上传文件的名称，用于标识文件
	SendId     int64  `protobuf:"varint,2,opt,name=sendId,proto3" json:"sendId,omitempty"`         // 用于确认消息的发送 ID
	UuidName   string `protobuf:"bytes,3,opt,name=uuidName,proto3" json:"uuidName,omitempty"`      // 服务器生成的文件唯一标识，例如存储在服务器上的文件名
	ChunkIndex int32  `protobuf:"varint,4,opt,name=chunkIndex,proto3" json:"chunkIndex,omitempty"` // 对单独每个块的应答
	Result     string `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`          // 上传结果或状态信息
	Detail     string `protobuf:"bytes,6,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *MsgUploadReply) Reset() {
	*x = MsgUploadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgUploadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgUploadReply) ProtoMessage() {}

func (x *MsgUploadReply) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgUploadReply.ProtoReflect.Descriptor instead.
func (*MsgUploadReply) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{8}
}

func (x *MsgUploadReply) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *MsgUploadReply) GetSendId() int64 {
	if x != nil {
		return x.SendId
	}
	return 0
}

func (x *MsgUploadReply) GetUuidName() string {
	if x != nil {
		return x.UuidName
	}
	return ""
}

func (x *MsgUploadReply) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *MsgUploadReply) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *MsgUploadReply) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

// 下载文件的请求消息
type MsgDownloadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendId   string `protobuf:"bytes,1,opt,name=sendId,proto3" json:"sendId,omitempty"`     // 用于确认消息的发送 ID
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"` // 要下载的文件名
	Offset   int64  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`    // 下载的文件偏移量，如果不需要分片下载，可以忽略
}

func (x *MsgDownloadReq) Reset() {
	*x = MsgDownloadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDownloadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDownloadReq) ProtoMessage() {}

func (x *MsgDownloadReq) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDownloadReq.ProtoReflect.Descriptor instead.
func (*MsgDownloadReq) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{9}
}

func (x *MsgDownloadReq) GetSendId() string {
	if x != nil {
		return x.SendId
	}
	return ""
}

func (x *MsgDownloadReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *MsgDownloadReq) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// 下载文件的响应消息
type MsgDownloadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendId   string `protobuf:"bytes,1,opt,name=sendId,proto3" json:"sendId,omitempty"`     // 用于确认消息的发送 ID
	FileName string `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"` // 要下载的文件名
	RealName string `protobuf:"bytes,3,opt,name=realName,proto3" json:"realName,omitempty"` // 实际保存在服务器上的文件名或标识符
	FileType string `protobuf:"bytes,4,opt,name=fileType,proto3" json:"fileType,omitempty"` // 文件类型（例如：文本、图像、视频等）
	HashType string `protobuf:"bytes,5,opt,name=hashType,proto3" json:"hashType,omitempty"` // 文件哈希算法类型，表示计算文件哈希值所使用的算法（MD5、SHA-256等）
	HashCode []byte `protobuf:"bytes,6,opt,name=hashCode,proto3" json:"hashCode,omitempty"` // 文件哈希值，用于验证文件完整性
	Data     []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`         // 下载的文件数据
	Size     int64  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`        // 文件总大小
	Offset   int64  `protobuf:"varint,9,opt,name=offset,proto3" json:"offset,omitempty"`    // 下载的文件偏移量，如果不需要分片下载，可以忽略
}

func (x *MsgDownloadReply) Reset() {
	*x = MsgDownloadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDownloadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDownloadReply) ProtoMessage() {}

func (x *MsgDownloadReply) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDownloadReply.ProtoReflect.Descriptor instead.
func (*MsgDownloadReply) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{10}
}

func (x *MsgDownloadReply) GetSendId() string {
	if x != nil {
		return x.SendId
	}
	return ""
}

func (x *MsgDownloadReply) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *MsgDownloadReply) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *MsgDownloadReply) GetFileType() string {
	if x != nil {
		return x.FileType
	}
	return ""
}

func (x *MsgDownloadReply) GetHashType() string {
	if x != nil {
		return x.HashType
	}
	return ""
}

func (x *MsgDownloadReply) GetHashCode() []byte {
	if x != nil {
		return x.HashCode
	}
	return nil
}

func (x *MsgDownloadReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MsgDownloadReply) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MsgDownloadReply) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type MsgError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code   int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Detail string            `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
	Params map[string]string `protobuf:"bytes,9,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MsgError) Reset() {
	*x = MsgError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgError) ProtoMessage() {}

func (x *MsgError) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgError.ProtoReflect.Descriptor instead.
func (*MsgError) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{11}
}

func (x *MsgError) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MsgError) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *MsgError) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type MsgPlain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*MsgPlain_Hello
	//	*MsgPlain_HeartBeat
	//	*MsgPlain_ErrorMsg
	//	*MsgPlain_KeyEx
	//	*MsgPlain_ChatData
	//	*MsgPlain_ChatReply
	//	*MsgPlain_CommonQuery
	//	*MsgPlain_CommonQueryRet
	//	*MsgPlain_UploadReq
	//	*MsgPlain_DownloadReq
	//	*MsgPlain_UploadReply
	//	*MsgPlain_DownloadReply
	//	*MsgPlain_UserOp
	//	*MsgPlain_UserOpRet
	//	*MsgPlain_FriendOp
	//	*MsgPlain_FriendOpRet
	//	*MsgPlain_GroupOp
	//	*MsgPlain_GroupOpRet
	//	*MsgPlain_OtherTypeMsg
	Message isMsgPlain_Message `protobuf_oneof:"message"`
}

func (x *MsgPlain) Reset() {
	*x = MsgPlain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgPlain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgPlain) ProtoMessage() {}

func (x *MsgPlain) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgPlain.ProtoReflect.Descriptor instead.
func (*MsgPlain) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{12}
}

func (m *MsgPlain) GetMessage() isMsgPlain_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *MsgPlain) GetHello() *MsgHello {
	if x, ok := x.GetMessage().(*MsgPlain_Hello); ok {
		return x.Hello
	}
	return nil
}

func (x *MsgPlain) GetHeartBeat() *MsgHeartBeat {
	if x, ok := x.GetMessage().(*MsgPlain_HeartBeat); ok {
		return x.HeartBeat
	}
	return nil
}

func (x *MsgPlain) GetErrorMsg() *MsgError {
	if x, ok := x.GetMessage().(*MsgPlain_ErrorMsg); ok {
		return x.ErrorMsg
	}
	return nil
}

func (x *MsgPlain) GetKeyEx() *MsgKeyExchange {
	if x, ok := x.GetMessage().(*MsgPlain_KeyEx); ok {
		return x.KeyEx
	}
	return nil
}

func (x *MsgPlain) GetChatData() *MsgChat {
	if x, ok := x.GetMessage().(*MsgPlain_ChatData); ok {
		return x.ChatData
	}
	return nil
}

func (x *MsgPlain) GetChatReply() *MsgChatReply {
	if x, ok := x.GetMessage().(*MsgPlain_ChatReply); ok {
		return x.ChatReply
	}
	return nil
}

func (x *MsgPlain) GetCommonQuery() *MsgQuery {
	if x, ok := x.GetMessage().(*MsgPlain_CommonQuery); ok {
		return x.CommonQuery
	}
	return nil
}

func (x *MsgPlain) GetCommonQueryRet() *MsgQueryResult {
	if x, ok := x.GetMessage().(*MsgPlain_CommonQueryRet); ok {
		return x.CommonQueryRet
	}
	return nil
}

func (x *MsgPlain) GetUploadReq() *MsgUploadReq {
	if x, ok := x.GetMessage().(*MsgPlain_UploadReq); ok {
		return x.UploadReq
	}
	return nil
}

func (x *MsgPlain) GetDownloadReq() *MsgDownloadReq {
	if x, ok := x.GetMessage().(*MsgPlain_DownloadReq); ok {
		return x.DownloadReq
	}
	return nil
}

func (x *MsgPlain) GetUploadReply() *MsgUploadReply {
	if x, ok := x.GetMessage().(*MsgPlain_UploadReply); ok {
		return x.UploadReply
	}
	return nil
}

func (x *MsgPlain) GetDownloadReply() *MsgDownloadReply {
	if x, ok := x.GetMessage().(*MsgPlain_DownloadReply); ok {
		return x.DownloadReply
	}
	return nil
}

func (x *MsgPlain) GetUserOp() *UserOpReq {
	if x, ok := x.GetMessage().(*MsgPlain_UserOp); ok {
		return x.UserOp
	}
	return nil
}

func (x *MsgPlain) GetUserOpRet() *UserOpResult {
	if x, ok := x.GetMessage().(*MsgPlain_UserOpRet); ok {
		return x.UserOpRet
	}
	return nil
}

func (x *MsgPlain) GetFriendOp() *FriendOpReq {
	if x, ok := x.GetMessage().(*MsgPlain_FriendOp); ok {
		return x.FriendOp
	}
	return nil
}

func (x *MsgPlain) GetFriendOpRet() *FriendOpResult {
	if x, ok := x.GetMessage().(*MsgPlain_FriendOpRet); ok {
		return x.FriendOpRet
	}
	return nil
}

func (x *MsgPlain) GetGroupOp() *GroupOpReq {
	if x, ok := x.GetMessage().(*MsgPlain_GroupOp); ok {
		return x.GroupOp
	}
	return nil
}

func (x *MsgPlain) GetGroupOpRet() *GroupOpResult {
	if x, ok := x.GetMessage().(*MsgPlain_GroupOpRet); ok {
		return x.GroupOpRet
	}
	return nil
}

func (x *MsgPlain) GetOtherTypeMsg() []byte {
	if x, ok := x.GetMessage().(*MsgPlain_OtherTypeMsg); ok {
		return x.OtherTypeMsg
	}
	return nil
}

type isMsgPlain_Message interface {
	isMsgPlain_Message()
}

type MsgPlain_Hello struct {
	Hello *MsgHello `protobuf:"bytes,7,opt,name=hello,proto3,oneof"` // Hello消息
}

type MsgPlain_HeartBeat struct {
	HeartBeat *MsgHeartBeat `protobuf:"bytes,8,opt,name=heartBeat,proto3,oneof"` // 心跳消息
}

type MsgPlain_ErrorMsg struct {
	ErrorMsg *MsgError `protobuf:"bytes,9,opt,name=errorMsg,proto3,oneof"`
}

type MsgPlain_KeyEx struct {
	KeyEx *MsgKeyExchange `protobuf:"bytes,10,opt,name=keyEx,proto3,oneof"` // 秘钥协商
}

type MsgPlain_ChatData struct {
	ChatData *MsgChat `protobuf:"bytes,11,opt,name=chatData,proto3,oneof"` // 聊天消息
}

type MsgPlain_ChatReply struct {
	ChatReply *MsgChatReply `protobuf:"bytes,12,opt,name=chatReply,proto3,oneof"` // 聊天回复消息
}

type MsgPlain_CommonQuery struct {
	CommonQuery *MsgQuery `protobuf:"bytes,13,opt,name=commonQuery,proto3,oneof"` // 请求同步消息，或者同步超时回执
}

type MsgPlain_CommonQueryRet struct {
	CommonQueryRet *MsgQueryResult `protobuf:"bytes,14,opt,name=commonQueryRet,proto3,oneof"` // 查询结果
}

type MsgPlain_UploadReq struct {
	UploadReq *MsgUploadReq `protobuf:"bytes,21,opt,name=uploadReq,proto3,oneof"` // 上传请求消息
}

type MsgPlain_DownloadReq struct {
	DownloadReq *MsgDownloadReq `protobuf:"bytes,22,opt,name=downloadReq,proto3,oneof"` // 下载请求消息
}

type MsgPlain_UploadReply struct {
	UploadReply *MsgUploadReply `protobuf:"bytes,23,opt,name=uploadReply,proto3,oneof"` // 上传回复消息
}

type MsgPlain_DownloadReply struct {
	DownloadReply *MsgDownloadReply `protobuf:"bytes,24,opt,name=downloadReply,proto3,oneof"` // 下载回复消息
}

type MsgPlain_UserOp struct {
	UserOp *UserOpReq `protobuf:"bytes,31,opt,name=userOp,proto3,oneof"` // 用户操作请求消息
}

type MsgPlain_UserOpRet struct {
	UserOpRet *UserOpResult `protobuf:"bytes,32,opt,name=userOpRet,proto3,oneof"` // 用户操作结果消息
}

type MsgPlain_FriendOp struct {
	FriendOp *FriendOpReq `protobuf:"bytes,33,opt,name=friendOp,proto3,oneof"` // 好友操作请求消息
}

type MsgPlain_FriendOpRet struct {
	FriendOpRet *FriendOpResult `protobuf:"bytes,34,opt,name=friendOpRet,proto3,oneof"` // 好友操作结果消息
}

type MsgPlain_GroupOp struct {
	GroupOp *GroupOpReq `protobuf:"bytes,35,opt,name=groupOp,proto3,oneof"` // 群组操作请求消息
}

type MsgPlain_GroupOpRet struct {
	GroupOpRet *GroupOpResult `protobuf:"bytes,36,opt,name=groupOpRet,proto3,oneof"` // 群组操作结果消息
}

type MsgPlain_OtherTypeMsg struct {
	OtherTypeMsg []byte `protobuf:"bytes,100,opt,name=otherTypeMsg,proto3,oneof"` // msgType==100时，直接将消息分发给扩展服务，不保存
}

func (*MsgPlain_Hello) isMsgPlain_Message() {}

func (*MsgPlain_HeartBeat) isMsgPlain_Message() {}

func (*MsgPlain_ErrorMsg) isMsgPlain_Message() {}

func (*MsgPlain_KeyEx) isMsgPlain_Message() {}

func (*MsgPlain_ChatData) isMsgPlain_Message() {}

func (*MsgPlain_ChatReply) isMsgPlain_Message() {}

func (*MsgPlain_CommonQuery) isMsgPlain_Message() {}

func (*MsgPlain_CommonQueryRet) isMsgPlain_Message() {}

func (*MsgPlain_UploadReq) isMsgPlain_Message() {}

func (*MsgPlain_DownloadReq) isMsgPlain_Message() {}

func (*MsgPlain_UploadReply) isMsgPlain_Message() {}

func (*MsgPlain_DownloadReply) isMsgPlain_Message() {}

func (*MsgPlain_UserOp) isMsgPlain_Message() {}

func (*MsgPlain_UserOpRet) isMsgPlain_Message() {}

func (*MsgPlain_FriendOp) isMsgPlain_Message() {}

func (*MsgPlain_FriendOpRet) isMsgPlain_Message() {}

func (*MsgPlain_GroupOp) isMsgPlain_Message() {}

func (*MsgPlain_GroupOpRet) isMsgPlain_Message() {}

func (*MsgPlain_OtherTypeMsg) isMsgPlain_Message() {}

// 所有的消息都用
type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  int32      `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`                       // 协议版本号
	KeyPrint int64      `protobuf:"varint,2,opt,name=keyPrint,proto3" json:"keyPrint,omitempty"`                     // 0是不加密，非0是加密
	Tm       int64      `protobuf:"varint,3,opt,name=tm,proto3" json:"tm,omitempty"`                                 // 时间戳
	MsgType  ComMsgType `protobuf:"varint,4,opt,name=msgType,proto3,enum=model.ComMsgType" json:"msgType,omitempty"` // 通用消息类型
	SubType  int32      `protobuf:"varint,5,opt,name=subType,proto3" json:"subType,omitempty"`                       // msgType==100时，其他类型的消息扩展模块自己定义
	// Types that are assignable to Message:
	//
	//	*Msg_Cipher
	//	*Msg_PlainMsg
	Message isMsg_Message `protobuf_oneof:"message"`
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{13}
}

func (x *Msg) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Msg) GetKeyPrint() int64 {
	if x != nil {
		return x.KeyPrint
	}
	return 0
}

func (x *Msg) GetTm() int64 {
	if x != nil {
		return x.Tm
	}
	return 0
}

func (x *Msg) GetMsgType() ComMsgType {
	if x != nil {
		return x.MsgType
	}
	return ComMsgType_MsgTUnused
}

func (x *Msg) GetSubType() int32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (m *Msg) GetMessage() isMsg_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Msg) GetCipher() []byte {
	if x, ok := x.GetMessage().(*Msg_Cipher); ok {
		return x.Cipher
	}
	return nil
}

func (x *Msg) GetPlainMsg() *MsgPlain {
	if x, ok := x.GetMessage().(*Msg_PlainMsg); ok {
		return x.PlainMsg
	}
	return nil
}

type isMsg_Message interface {
	isMsg_Message()
}

type Msg_Cipher struct {
	Cipher []byte `protobuf:"bytes,11,opt,name=cipher,proto3,oneof"` // 密文，需要解密后，二次解码
}

type Msg_PlainMsg struct {
	PlainMsg *MsgPlain `protobuf:"bytes,12,opt,name=plainMsg,proto3,oneof"` // 明文的消息直接放到这里；
}

func (*Msg_Cipher) isMsg_Message() {}

func (*Msg_PlainMsg) isMsg_Message() {}

var File_msg_proto protoreflect.FileDescriptor

var file_msg_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2,
	0x02, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x73, 0x61, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x72, 0x73, 0x61, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe2, 0x01, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x4b, 0x65, 0x79, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x72, 0x73, 0x61, 0x50, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x72, 0x73,
	0x61, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x65, 0x6d, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74,
	0x65, 0x6d, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x3e, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x02, 0x74, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x74, 0x6d, 0x12, 0x1a, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf1, 0x05, 0x0a, 0x07, 0x4d, 0x73, 0x67,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x66, 0x72,
	0x6f, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06,
	0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x02, 0x74, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02,
	0x74, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x76, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0c, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x72, 0x65, 0x63, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x75, 0x62, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x02, 0x0a,
	0x0c, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x63, 0x76, 0x4f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x63,
	0x76, 0x4f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x8d, 0x03, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x05, 0x62, 0x69,
	0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x05, 0x62,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x6c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x02, 0x74, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02,
	0x74, 0x6d, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x87, 0x05, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x05, 0x62, 0x69, 0x67, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x05, 0x62, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x6c, 0x69,
	0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x08, 0x6c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x79,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x79, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x79, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x02, 0x74, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x74, 0x6d, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0f, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4f, 0x70, 0x52, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f,
	0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70,
	0x52, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x02,
	0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x75, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x75, 0x69, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x5c, 0x0a, 0x0e, 0x4d, 0x73, 0x67,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x22, 0xa6, 0x01, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x07, 0x0a, 0x08, 0x4d, 0x73,
	0x67, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73,
	0x67, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x12,
	0x33, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x73, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x45, 0x78, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x4b, 0x65,
	0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x45, 0x78, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67,
	0x43, 0x68, 0x61, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x68, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x33, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x39, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73,
	0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x0b, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x4f,
	0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x4f, 0x70, 0x12, 0x33, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x74,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x4f, 0x70, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00,
	0x52, 0x08, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x12, 0x39, 0x0a, 0x0b, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4f, 0x70, 0x52, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x52,
	0x65, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0c,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x73, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xee, 0x01,
	0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x02, 0x30, 0x01, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x02, 0x74, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x02, 0x74, 0x6d, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6d,
	0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4d, 0x73, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d,
	0x73, 0x67, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x4d, 0x73, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x2c,
	0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x2a, 0x58, 0x0a, 0x0d,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x63, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x03,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x59, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x4c, 0x55, 0x47, 0x49, 0x4e, 0x10, 0x64, 0x2a, 0x48, 0x0a, 0x0b, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c,
	0x41, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x41, 0x43, 0x48, 0x41, 0x32, 0x30, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x57, 0x4f, 0x46, 0x49, 0x53, 0x48, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x45, 0x53, 0x10, 0x04, 0x2a, 0x40, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x32, 0x50, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x02, 0x2a, 0x7b, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x50, 0x10, 0x03, 0x2a, 0x46, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x79, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x10, 0x02, 0x2a, 0x88, 0x03, 0x0a,
	0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x72, 0x72, 0x54, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x72, 0x72, 0x54, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x72, 0x72, 0x54, 0x4b, 0x65, 0x79, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x72, 0x72, 0x54, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x54, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x50, 0x77, 0x64,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x54, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x54, 0x52, 0x73, 0x61,
	0x50, 0x72, 0x69, 0x6e, 0x74, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x54, 0x54,
	0x65, 0x6d, 0x70, 0x4b, 0x65, 0x79, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x54,
	0x45, 0x6e, 0x63, 0x54, 0x79, 0x70, 0x65, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x72, 0x72,
	0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x10, 0x09, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x54, 0x53, 0x74, 0x61, 0x67, 0x65, 0x10, 0x0a, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x72, 0x72, 0x54, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x10,
	0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x72, 0x72, 0x54, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x72, 0x72, 0x54, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x72, 0x72,
	0x54, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x10, 0x0e, 0x12, 0x10, 0x0a,
	0x0c, 0x45, 0x72, 0x72, 0x54, 0x4e, 0x6f, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x0f, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x72, 0x72, 0x54, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x54, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x54,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x54, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x54,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x14, 0x2a, 0xf6, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x54, 0x55, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x54, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x54, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x54,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x54, 0x4b,
	0x65, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x73, 0x67, 0x54, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x10, 0x0b, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x73, 0x67, 0x54, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x0c,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x54, 0x51, 0x75, 0x65, 0x72, 0x79, 0x10, 0x0d, 0x12,
	0x13, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x54, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x54, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x54, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x54, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x4d,
	0x73, 0x67, 0x54, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x54, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70,
	0x10, 0x1f, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x73, 0x67, 0x54, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70,
	0x52, 0x65, 0x74, 0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x54, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x4f, 0x70, 0x10, 0x21, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x54, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x10, 0x22, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x73, 0x67, 0x54, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x10, 0x23, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x73, 0x67, 0x54, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x52, 0x65, 0x74, 0x10,
	0x24, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x54, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x64,
	0x32, 0x33, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0a, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x1a, 0x0a, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x10, 0x5a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x70, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msg_proto_rawDescOnce sync.Once
	file_msg_proto_rawDescData = file_msg_proto_rawDesc
)

func file_msg_proto_rawDescGZIP() []byte {
	file_msg_proto_rawDescOnce.Do(func() {
		file_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_msg_proto_rawDescData)
	})
	return file_msg_proto_rawDescData
}

var file_msg_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_msg_proto_goTypes = []interface{}{
	(MsgPriority)(0),         // 0: model.MsgPriority
	(ChatMsgStatus)(0),       // 1: model.ChatMsgStatus
	(ChatMsgType)(0),         // 2: model.ChatMsgType
	(EncryptType)(0),         // 3: model.EncryptType
	(ChatType)(0),            // 4: model.ChatType
	(QueryDataType)(0),       // 5: model.QueryDataType
	(SynType)(0),             // 6: model.SynType
	(ErrorMsgType)(0),        // 7: model.ErrorMsgType
	(ComMsgType)(0),          // 8: model.ComMsgType
	(*MsgHello)(nil),         // 9: model.MsgHello
	(*MsgKeyExchange)(nil),   // 10: model.MsgKeyExchange
	(*MsgHeartBeat)(nil),     // 11: model.MsgHeartBeat
	(*MsgChat)(nil),          // 12: model.MsgChat
	(*MsgChatReply)(nil),     // 13: model.MsgChatReply
	(*MsgQuery)(nil),         // 14: model.MsgQuery
	(*MsgQueryResult)(nil),   // 15: model.MsgQueryResult
	(*MsgUploadReq)(nil),     // 16: model.MsgUploadReq
	(*MsgUploadReply)(nil),   // 17: model.MsgUploadReply
	(*MsgDownloadReq)(nil),   // 18: model.MsgDownloadReq
	(*MsgDownloadReply)(nil), // 19: model.MsgDownloadReply
	(*MsgError)(nil),         // 20: model.MsgError
	(*MsgPlain)(nil),         // 21: model.MsgPlain
	(*Msg)(nil),              // 22: model.Msg
	nil,                      // 23: model.MsgHello.ParamsEntry
	nil,                      // 24: model.MsgChat.ParamsEntry
	nil,                      // 25: model.MsgChatReply.ParamsEntry
	nil,                      // 26: model.MsgQuery.ParamsEntry
	nil,                      // 27: model.MsgQueryResult.ParamsEntry
	nil,                      // 28: model.MsgError.ParamsEntry
	(*FriendOpResult)(nil),   // 29: model.FriendOpResult
	(*GroupOpResult)(nil),    // 30: model.GroupOpResult
	(*UserOpReq)(nil),        // 31: model.UserOpReq
	(*UserOpResult)(nil),     // 32: model.UserOpResult
	(*FriendOpReq)(nil),      // 33: model.FriendOpReq
	(*GroupOpReq)(nil),       // 34: model.GroupOpReq
}
var file_msg_proto_depIdxs = []int32{
	23, // 0: model.MsgHello.params:type_name -> model.MsgHello.ParamsEntry
	2,  // 1: model.MsgChat.msgType:type_name -> model.ChatMsgType
	0,  // 2: model.MsgChat.priority:type_name -> model.MsgPriority
	1,  // 3: model.MsgChat.status:type_name -> model.ChatMsgStatus
	3,  // 4: model.MsgChat.encType:type_name -> model.EncryptType
	4,  // 5: model.MsgChat.chatType:type_name -> model.ChatType
	24, // 6: model.MsgChat.params:type_name -> model.MsgChat.ParamsEntry
	25, // 7: model.MsgChatReply.params:type_name -> model.MsgChatReply.ParamsEntry
	6,  // 8: model.MsgQuery.synType:type_name -> model.SynType
	4,  // 9: model.MsgQuery.chatType:type_name -> model.ChatType
	5,  // 10: model.MsgQuery.queryType:type_name -> model.QueryDataType
	26, // 11: model.MsgQuery.params:type_name -> model.MsgQuery.ParamsEntry
	6,  // 12: model.MsgQueryResult.synType:type_name -> model.SynType
	4,  // 13: model.MsgQueryResult.chatType:type_name -> model.ChatType
	5,  // 14: model.MsgQueryResult.queryType:type_name -> model.QueryDataType
	12, // 15: model.MsgQueryResult.chatDataList:type_name -> model.MsgChat
	13, // 16: model.MsgQueryResult.chatReplyList:type_name -> model.MsgChatReply
	29, // 17: model.MsgQueryResult.friendOpRetList:type_name -> model.FriendOpResult
	30, // 18: model.MsgQueryResult.groupOpRetList:type_name -> model.GroupOpResult
	27, // 19: model.MsgQueryResult.params:type_name -> model.MsgQueryResult.ParamsEntry
	28, // 20: model.MsgError.params:type_name -> model.MsgError.ParamsEntry
	9,  // 21: model.MsgPlain.hello:type_name -> model.MsgHello
	11, // 22: model.MsgPlain.heartBeat:type_name -> model.MsgHeartBeat
	20, // 23: model.MsgPlain.errorMsg:type_name -> model.MsgError
	10, // 24: model.MsgPlain.keyEx:type_name -> model.MsgKeyExchange
	12, // 25: model.MsgPlain.chatData:type_name -> model.MsgChat
	13, // 26: model.MsgPlain.chatReply:type_name -> model.MsgChatReply
	14, // 27: model.MsgPlain.commonQuery:type_name -> model.MsgQuery
	15, // 28: model.MsgPlain.commonQueryRet:type_name -> model.MsgQueryResult
	16, // 29: model.MsgPlain.uploadReq:type_name -> model.MsgUploadReq
	18, // 30: model.MsgPlain.downloadReq:type_name -> model.MsgDownloadReq
	17, // 31: model.MsgPlain.uploadReply:type_name -> model.MsgUploadReply
	19, // 32: model.MsgPlain.downloadReply:type_name -> model.MsgDownloadReply
	31, // 33: model.MsgPlain.userOp:type_name -> model.UserOpReq
	32, // 34: model.MsgPlain.userOpRet:type_name -> model.UserOpResult
	33, // 35: model.MsgPlain.friendOp:type_name -> model.FriendOpReq
	29, // 36: model.MsgPlain.friendOpRet:type_name -> model.FriendOpResult
	34, // 37: model.MsgPlain.groupOp:type_name -> model.GroupOpReq
	30, // 38: model.MsgPlain.groupOpRet:type_name -> model.GroupOpResult
	8,  // 39: model.Msg.msgType:type_name -> model.ComMsgType
	21, // 40: model.Msg.plainMsg:type_name -> model.MsgPlain
	22, // 41: model.MsgService.ClientEvent:input_type -> model.Msg
	22, // 42: model.MsgService.ClientEvent:output_type -> model.Msg
	42, // [42:43] is the sub-list for method output_type
	41, // [41:42] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_msg_proto_init() }
func file_msg_proto_init() {
	if File_msg_proto != nil {
		return
	}
	file_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgKeyExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgChatReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUploadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgUploadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDownloadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDownloadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgPlain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_msg_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*MsgPlain_Hello)(nil),
		(*MsgPlain_HeartBeat)(nil),
		(*MsgPlain_ErrorMsg)(nil),
		(*MsgPlain_KeyEx)(nil),
		(*MsgPlain_ChatData)(nil),
		(*MsgPlain_ChatReply)(nil),
		(*MsgPlain_CommonQuery)(nil),
		(*MsgPlain_CommonQueryRet)(nil),
		(*MsgPlain_UploadReq)(nil),
		(*MsgPlain_DownloadReq)(nil),
		(*MsgPlain_UploadReply)(nil),
		(*MsgPlain_DownloadReply)(nil),
		(*MsgPlain_UserOp)(nil),
		(*MsgPlain_UserOpRet)(nil),
		(*MsgPlain_FriendOp)(nil),
		(*MsgPlain_FriendOpRet)(nil),
		(*MsgPlain_GroupOp)(nil),
		(*MsgPlain_GroupOpRet)(nil),
		(*MsgPlain_OtherTypeMsg)(nil),
	}
	file_msg_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Msg_Cipher)(nil),
		(*Msg_PlainMsg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_msg_proto_goTypes,
		DependencyIndexes: file_msg_proto_depIdxs,
		EnumInfos:         file_msg_proto_enumTypes,
		MessageInfos:      file_msg_proto_msgTypes,
	}.Build()
	File_msg_proto = out.File
	file_msg_proto_rawDesc = nil
	file_msg_proto_goTypes = nil
	file_msg_proto_depIdxs = nil
}
